// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/predicate"
	"TH0400/repo/ent/usertopic"
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserTopicUpdate is the builder for updating UserTopic entities.
type UserTopicUpdate struct {
	config
	hooks      []Hook
	mutation   *UserTopicMutation
	predicates []predicate.UserTopic
}

// Where adds a new predicate for the builder.
func (utu *UserTopicUpdate) Where(ps ...predicate.UserTopic) *UserTopicUpdate {
	utu.predicates = append(utu.predicates, ps...)
	return utu
}

// Mutation returns the UserTopicMutation object of the builder.
func (utu *UserTopicUpdate) Mutation() *UserTopicMutation {
	return utu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (utu *UserTopicUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(utu.hooks) == 0 {
		affected, err = utu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserTopicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			utu.mutation = mutation
			affected, err = utu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(utu.hooks) - 1; i >= 0; i-- {
			mut = utu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, utu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (utu *UserTopicUpdate) SaveX(ctx context.Context) int {
	affected, err := utu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utu *UserTopicUpdate) Exec(ctx context.Context) error {
	_, err := utu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utu *UserTopicUpdate) ExecX(ctx context.Context) {
	if err := utu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utu *UserTopicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usertopic.Table,
			Columns: usertopic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usertopic.FieldID,
			},
		},
	}
	if ps := utu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertopic.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserTopicUpdateOne is the builder for updating a single UserTopic entity.
type UserTopicUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserTopicMutation
}

// Mutation returns the UserTopicMutation object of the builder.
func (utuo *UserTopicUpdateOne) Mutation() *UserTopicMutation {
	return utuo.mutation
}

// Save executes the query and returns the updated entity.
func (utuo *UserTopicUpdateOne) Save(ctx context.Context) (*UserTopic, error) {
	var (
		err  error
		node *UserTopic
	)
	if len(utuo.hooks) == 0 {
		node, err = utuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserTopicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			utuo.mutation = mutation
			node, err = utuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(utuo.hooks) - 1; i >= 0; i-- {
			mut = utuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, utuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (utuo *UserTopicUpdateOne) SaveX(ctx context.Context) *UserTopic {
	ut, err := utuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ut
}

// Exec executes the query on the entity.
func (utuo *UserTopicUpdateOne) Exec(ctx context.Context) error {
	_, err := utuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utuo *UserTopicUpdateOne) ExecX(ctx context.Context) {
	if err := utuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utuo *UserTopicUpdateOne) sqlSave(ctx context.Context) (ut *UserTopic, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usertopic.Table,
			Columns: usertopic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usertopic.FieldID,
			},
		},
	}
	id, ok := utuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UserTopic.ID for update")}
	}
	_spec.Node.ID.Value = id
	ut = &UserTopic{config: utuo.config}
	_spec.Assign = ut.assignValues
	_spec.ScanValues = ut.scanValues()
	if err = sqlgraph.UpdateNode(ctx, utuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertopic.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ut, nil
}
