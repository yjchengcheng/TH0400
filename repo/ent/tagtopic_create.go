// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/tagtopic"
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// TagTopicCreate is the builder for creating a TagTopic entity.
type TagTopicCreate struct {
	config
	mutation *TagTopicMutation
	hooks    []Hook
}

// SetTagID sets the tag_id field.
func (ttc *TagTopicCreate) SetTagID(i int) *TagTopicCreate {
	ttc.mutation.SetTagID(i)
	return ttc
}

// SetTopicID sets the topic_id field.
func (ttc *TagTopicCreate) SetTopicID(i int) *TagTopicCreate {
	ttc.mutation.SetTopicID(i)
	return ttc
}

// SetID sets the id field.
func (ttc *TagTopicCreate) SetID(i int) *TagTopicCreate {
	ttc.mutation.SetID(i)
	return ttc
}

// Mutation returns the TagTopicMutation object of the builder.
func (ttc *TagTopicCreate) Mutation() *TagTopicMutation {
	return ttc.mutation
}

// Save creates the TagTopic in the database.
func (ttc *TagTopicCreate) Save(ctx context.Context) (*TagTopic, error) {
	if _, ok := ttc.mutation.TagID(); !ok {
		return nil, &ValidationError{Name: "tag_id", err: errors.New("ent: missing required field \"tag_id\"")}
	}
	if _, ok := ttc.mutation.TopicID(); !ok {
		return nil, &ValidationError{Name: "topic_id", err: errors.New("ent: missing required field \"topic_id\"")}
	}
	var (
		err  error
		node *TagTopic
	)
	if len(ttc.hooks) == 0 {
		node, err = ttc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TagTopicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ttc.mutation = mutation
			node, err = ttc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttc.hooks) - 1; i >= 0; i-- {
			mut = ttc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TagTopicCreate) SaveX(ctx context.Context) *TagTopic {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ttc *TagTopicCreate) sqlSave(ctx context.Context) (*TagTopic, error) {
	tt, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if tt.ID == 0 {
		id := _spec.ID.Value.(int64)
		tt.ID = int(id)
	}
	return tt, nil
}

func (ttc *TagTopicCreate) createSpec() (*TagTopic, *sqlgraph.CreateSpec) {
	var (
		tt    = &TagTopic{config: ttc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tagtopic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tagtopic.FieldID,
			},
		}
	)
	if id, ok := ttc.mutation.ID(); ok {
		tt.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ttc.mutation.TagID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagtopic.FieldTagID,
		})
		tt.TagID = value
	}
	if value, ok := ttc.mutation.TopicID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: tagtopic.FieldTopicID,
		})
		tt.TopicID = value
	}
	return tt, _spec
}
