// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/predicate"
	"TH0400/repo/ent/tagtopic"
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// TagTopicUpdate is the builder for updating TagTopic entities.
type TagTopicUpdate struct {
	config
	hooks      []Hook
	mutation   *TagTopicMutation
	predicates []predicate.TagTopic
}

// Where adds a new predicate for the builder.
func (ttu *TagTopicUpdate) Where(ps ...predicate.TagTopic) *TagTopicUpdate {
	ttu.predicates = append(ttu.predicates, ps...)
	return ttu
}

// Mutation returns the TagTopicMutation object of the builder.
func (ttu *TagTopicUpdate) Mutation() *TagTopicMutation {
	return ttu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ttu *TagTopicUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ttu.hooks) == 0 {
		affected, err = ttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TagTopicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ttu.mutation = mutation
			affected, err = ttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ttu.hooks) - 1; i >= 0; i-- {
			mut = ttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TagTopicUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TagTopicUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TagTopicUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttu *TagTopicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tagtopic.Table,
			Columns: tagtopic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tagtopic.FieldID,
			},
		},
	}
	if ps := ttu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tagtopic.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TagTopicUpdateOne is the builder for updating a single TagTopic entity.
type TagTopicUpdateOne struct {
	config
	hooks    []Hook
	mutation *TagTopicMutation
}

// Mutation returns the TagTopicMutation object of the builder.
func (ttuo *TagTopicUpdateOne) Mutation() *TagTopicMutation {
	return ttuo.mutation
}

// Save executes the query and returns the updated entity.
func (ttuo *TagTopicUpdateOne) Save(ctx context.Context) (*TagTopic, error) {
	var (
		err  error
		node *TagTopic
	)
	if len(ttuo.hooks) == 0 {
		node, err = ttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TagTopicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ttuo.mutation = mutation
			node, err = ttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttuo.hooks) - 1; i >= 0; i-- {
			mut = ttuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TagTopicUpdateOne) SaveX(ctx context.Context) *TagTopic {
	tt, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return tt
}

// Exec executes the query on the entity.
func (ttuo *TagTopicUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TagTopicUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttuo *TagTopicUpdateOne) sqlSave(ctx context.Context) (tt *TagTopic, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tagtopic.Table,
			Columns: tagtopic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tagtopic.FieldID,
			},
		},
	}
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TagTopic.ID for update")}
	}
	_spec.Node.ID.Value = id
	tt = &TagTopic{config: ttuo.config}
	_spec.Assign = tt.assignValues
	_spec.ScanValues = tt.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tagtopic.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return tt, nil
}
