// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/tagtopic"
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// TagTopic is the model entity for the TagTopic schema.
type TagTopic struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TagID holds the value of the "tag_id" field.
	TagID int `json:"tag_id,omitempty"`
	// TopicID holds the value of the "topic_id" field.
	TopicID int `json:"topic_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TagTopic) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // tag_id
		&sql.NullInt64{}, // topic_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TagTopic fields.
func (tt *TagTopic) assignValues(values ...interface{}) error {
	if m, n := len(values), len(tagtopic.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	tt.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field tag_id", values[0])
	} else if value.Valid {
		tt.TagID = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field topic_id", values[1])
	} else if value.Valid {
		tt.TopicID = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this TagTopic.
// Note that, you need to call TagTopic.Unwrap() before calling this method, if this TagTopic
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TagTopic) Update() *TagTopicUpdateOne {
	return (&TagTopicClient{config: tt.config}).UpdateOne(tt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (tt *TagTopic) Unwrap() *TagTopic {
	tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TagTopic is not a transactional entity")
	}
	tt.config.driver = tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TagTopic) String() string {
	var builder strings.Builder
	builder.WriteString("TagTopic(")
	builder.WriteString(fmt.Sprintf("id=%v", tt.ID))
	builder.WriteString(", tag_id=")
	builder.WriteString(fmt.Sprintf("%v", tt.TagID))
	builder.WriteString(", topic_id=")
	builder.WriteString(fmt.Sprintf("%v", tt.TopicID))
	builder.WriteByte(')')
	return builder.String()
}

// TagTopics is a parsable slice of TagTopic.
type TagTopics []*TagTopic

func (tt TagTopics) config(cfg config) {
	for _i := range tt {
		tt[_i].config = cfg
	}
}
