// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/topic"
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// TopicCreate is the builder for creating a Topic entity.
type TopicCreate struct {
	config
	mutation *TopicMutation
	hooks    []Hook
}

// SetTitle sets the title field.
func (tc *TopicCreate) SetTitle(s string) *TopicCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetContent sets the content field.
func (tc *TopicCreate) SetContent(s string) *TopicCreate {
	tc.mutation.SetContent(s)
	return tc
}

// SetNillableContent sets the content field if the given value is not nil.
func (tc *TopicCreate) SetNillableContent(s *string) *TopicCreate {
	if s != nil {
		tc.SetContent(*s)
	}
	return tc
}

// SetIsReleased sets the is_released field.
func (tc *TopicCreate) SetIsReleased(b bool) *TopicCreate {
	tc.mutation.SetIsReleased(b)
	return tc
}

// SetCreatedAt sets the created_at field.
func (tc *TopicCreate) SetCreatedAt(t time.Time) *TopicCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (tc *TopicCreate) SetNillableCreatedAt(t *time.Time) *TopicCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the updated_at field.
func (tc *TopicCreate) SetUpdatedAt(t time.Time) *TopicCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (tc *TopicCreate) SetNillableUpdatedAt(t *time.Time) *TopicCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetCreaterID sets the creater_id field.
func (tc *TopicCreate) SetCreaterID(i int) *TopicCreate {
	tc.mutation.SetCreaterID(i)
	return tc
}

// SetID sets the id field.
func (tc *TopicCreate) SetID(i int) *TopicCreate {
	tc.mutation.SetID(i)
	return tc
}

// Mutation returns the TopicMutation object of the builder.
func (tc *TopicCreate) Mutation() *TopicMutation {
	return tc.mutation
}

// Save creates the Topic in the database.
func (tc *TopicCreate) Save(ctx context.Context) (*Topic, error) {
	if _, ok := tc.mutation.Title(); !ok {
		return nil, &ValidationError{Name: "title", err: errors.New("ent: missing required field \"title\"")}
	}
	if v, ok := tc.mutation.Title(); ok {
		if err := topic.TitleValidator(v); err != nil {
			return nil, &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if _, ok := tc.mutation.Content(); !ok {
		v := topic.DefaultContent
		tc.mutation.SetContent(v)
	}
	if _, ok := tc.mutation.IsReleased(); !ok {
		return nil, &ValidationError{Name: "is_released", err: errors.New("ent: missing required field \"is_released\"")}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := topic.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := topic.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.CreaterID(); !ok {
		return nil, &ValidationError{Name: "creater_id", err: errors.New("ent: missing required field \"creater_id\"")}
	}
	var (
		err  error
		node *Topic
	)
	if len(tc.hooks) == 0 {
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TopicCreate) SaveX(ctx context.Context) *Topic {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TopicCreate) sqlSave(ctx context.Context) (*Topic, error) {
	t, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if t.ID == 0 {
		id := _spec.ID.Value.(int64)
		t.ID = int(id)
	}
	return t, nil
}

func (tc *TopicCreate) createSpec() (*Topic, *sqlgraph.CreateSpec) {
	var (
		t     = &Topic{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: topic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: topic.FieldID,
			},
		}
	)
	if id, ok := tc.mutation.ID(); ok {
		t.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topic.FieldTitle,
		})
		t.Title = value
	}
	if value, ok := tc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topic.FieldContent,
		})
		t.Content = value
	}
	if value, ok := tc.mutation.IsReleased(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: topic.FieldIsReleased,
		})
		t.IsReleased = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: topic.FieldCreatedAt,
		})
		t.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: topic.FieldUpdatedAt,
		})
		t.UpdatedAt = value
	}
	if value, ok := tc.mutation.CreaterID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: topic.FieldCreaterID,
		})
		t.CreaterID = value
	}
	return t, _spec
}
