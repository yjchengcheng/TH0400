// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/userusertopic"
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserUserTopicCreate is the builder for creating a UserUserTopic entity.
type UserUserTopicCreate struct {
	config
	mutation *UserUserTopicMutation
	hooks    []Hook
}

// SetInviterID sets the inviter_id field.
func (uutc *UserUserTopicCreate) SetInviterID(i int) *UserUserTopicCreate {
	uutc.mutation.SetInviterID(i)
	return uutc
}

// SetInvitedID sets the invited_id field.
func (uutc *UserUserTopicCreate) SetInvitedID(i int) *UserUserTopicCreate {
	uutc.mutation.SetInvitedID(i)
	return uutc
}

// SetTopicID sets the topic_id field.
func (uutc *UserUserTopicCreate) SetTopicID(i int) *UserUserTopicCreate {
	uutc.mutation.SetTopicID(i)
	return uutc
}

// SetID sets the id field.
func (uutc *UserUserTopicCreate) SetID(i int) *UserUserTopicCreate {
	uutc.mutation.SetID(i)
	return uutc
}

// Mutation returns the UserUserTopicMutation object of the builder.
func (uutc *UserUserTopicCreate) Mutation() *UserUserTopicMutation {
	return uutc.mutation
}

// Save creates the UserUserTopic in the database.
func (uutc *UserUserTopicCreate) Save(ctx context.Context) (*UserUserTopic, error) {
	if _, ok := uutc.mutation.InviterID(); !ok {
		return nil, &ValidationError{Name: "inviter_id", err: errors.New("ent: missing required field \"inviter_id\"")}
	}
	if _, ok := uutc.mutation.InvitedID(); !ok {
		return nil, &ValidationError{Name: "invited_id", err: errors.New("ent: missing required field \"invited_id\"")}
	}
	if _, ok := uutc.mutation.TopicID(); !ok {
		return nil, &ValidationError{Name: "topic_id", err: errors.New("ent: missing required field \"topic_id\"")}
	}
	var (
		err  error
		node *UserUserTopic
	)
	if len(uutc.hooks) == 0 {
		node, err = uutc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserUserTopicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uutc.mutation = mutation
			node, err = uutc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uutc.hooks) - 1; i >= 0; i-- {
			mut = uutc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uutc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uutc *UserUserTopicCreate) SaveX(ctx context.Context) *UserUserTopic {
	v, err := uutc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uutc *UserUserTopicCreate) sqlSave(ctx context.Context) (*UserUserTopic, error) {
	uut, _spec := uutc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uutc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if uut.ID == 0 {
		id := _spec.ID.Value.(int64)
		uut.ID = int(id)
	}
	return uut, nil
}

func (uutc *UserUserTopicCreate) createSpec() (*UserUserTopic, *sqlgraph.CreateSpec) {
	var (
		uut   = &UserUserTopic{config: uutc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userusertopic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userusertopic.FieldID,
			},
		}
	)
	if id, ok := uutc.mutation.ID(); ok {
		uut.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uutc.mutation.InviterID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userusertopic.FieldInviterID,
		})
		uut.InviterID = value
	}
	if value, ok := uutc.mutation.InvitedID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userusertopic.FieldInvitedID,
		})
		uut.InvitedID = value
	}
	if value, ok := uutc.mutation.TopicID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userusertopic.FieldTopicID,
		})
		uut.TopicID = value
	}
	return uut, _spec
}
