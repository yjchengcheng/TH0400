// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUserName sets the user_name field.
func (uc *UserCreate) SetUserName(s string) *UserCreate {
	uc.mutation.SetUserName(s)
	return uc
}

// SetPassword sets the password field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetSchool sets the school field.
func (uc *UserCreate) SetSchool(s string) *UserCreate {
	uc.mutation.SetSchool(s)
	return uc
}

// SetNillableSchool sets the school field if the given value is not nil.
func (uc *UserCreate) SetNillableSchool(s *string) *UserCreate {
	if s != nil {
		uc.SetSchool(*s)
	}
	return uc
}

// SetLevel sets the level field.
func (uc *UserCreate) SetLevel(i int) *UserCreate {
	uc.mutation.SetLevel(i)
	return uc
}

// SetNillableLevel sets the level field if the given value is not nil.
func (uc *UserCreate) SetNillableLevel(i *int) *UserCreate {
	if i != nil {
		uc.SetLevel(*i)
	}
	return uc
}

// SetLikes sets the likes field.
func (uc *UserCreate) SetLikes(i int) *UserCreate {
	uc.mutation.SetLikes(i)
	return uc
}

// SetNillableLikes sets the likes field if the given value is not nil.
func (uc *UserCreate) SetNillableLikes(i *int) *UserCreate {
	if i != nil {
		uc.SetLikes(*i)
	}
	return uc
}

// SetViews sets the views field.
func (uc *UserCreate) SetViews(i int) *UserCreate {
	uc.mutation.SetViews(i)
	return uc
}

// SetNillableViews sets the views field if the given value is not nil.
func (uc *UserCreate) SetNillableViews(i *int) *UserCreate {
	if i != nil {
		uc.SetViews(*i)
	}
	return uc
}

// SetCreatedAt sets the created_at field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the updated_at field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetIsDeleted sets the is_deleted field.
func (uc *UserCreate) SetIsDeleted(b bool) *UserCreate {
	uc.mutation.SetIsDeleted(b)
	return uc
}

// SetNillableIsDeleted sets the is_deleted field if the given value is not nil.
func (uc *UserCreate) SetNillableIsDeleted(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsDeleted(*b)
	}
	return uc
}

// SetID sets the id field.
func (uc *UserCreate) SetID(i int) *UserCreate {
	uc.mutation.SetID(i)
	return uc
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if _, ok := uc.mutation.UserName(); !ok {
		return nil, &ValidationError{Name: "user_name", err: errors.New("ent: missing required field \"user_name\"")}
	}
	if v, ok := uc.mutation.UserName(); ok {
		if err := user.UserNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "user_name", err: fmt.Errorf("ent: validator failed for field \"user_name\": %w", err)}
		}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return nil, &ValidationError{Name: "password", err: errors.New("ent: missing required field \"password\"")}
	}
	if v, ok := uc.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "password", err: fmt.Errorf("ent: validator failed for field \"password\": %w", err)}
		}
	}
	if _, ok := uc.mutation.Level(); !ok {
		v := user.DefaultLevel
		uc.mutation.SetLevel(v)
	}
	if v, ok := uc.mutation.Level(); ok {
		if err := user.LevelValidator(v); err != nil {
			return nil, &ValidationError{Name: "level", err: fmt.Errorf("ent: validator failed for field \"level\": %w", err)}
		}
	}
	if _, ok := uc.mutation.Likes(); !ok {
		v := user.DefaultLikes
		uc.mutation.SetLikes(v)
	}
	if v, ok := uc.mutation.Likes(); ok {
		if err := user.LikesValidator(v); err != nil {
			return nil, &ValidationError{Name: "likes", err: fmt.Errorf("ent: validator failed for field \"likes\": %w", err)}
		}
	}
	if _, ok := uc.mutation.Views(); !ok {
		v := user.DefaultViews
		uc.mutation.SetViews(v)
	}
	if v, ok := uc.mutation.Views(); ok {
		if err := user.ViewsValidator(v); err != nil {
			return nil, &ValidationError{Name: "views", err: fmt.Errorf("ent: validator failed for field \"views\": %w", err)}
		}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.IsDeleted(); !ok {
		v := user.DefaultIsDeleted
		uc.mutation.SetIsDeleted(v)
	}
	var (
		err  error
		node *User
	)
	if len(uc.hooks) == 0 {
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	u, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if u.ID == 0 {
		id := _spec.ID.Value.(int64)
		u.ID = int(id)
	}
	return u, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		u     = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if id, ok := uc.mutation.ID(); ok {
		u.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.UserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUserName,
		})
		u.UserName = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
		u.Password = value
	}
	if value, ok := uc.mutation.School(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSchool,
		})
		u.School = value
	}
	if value, ok := uc.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldLevel,
		})
		u.Level = value
	}
	if value, ok := uc.mutation.Likes(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldLikes,
		})
		u.Likes = value
	}
	if value, ok := uc.mutation.Views(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldViews,
		})
		u.Views = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
		u.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
		u.UpdatedAt = value
	}
	if value, ok := uc.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldIsDeleted,
		})
		u.IsDeleted = value
	}
	return u, _spec
}
