// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/answer"
	"TH0400/repo/ent/tag"
	"TH0400/repo/ent/tagtopic"
	"TH0400/repo/ent/topic"
	"TH0400/repo/ent/user"
	"TH0400/repo/ent/usertopic"
	"TH0400/repo/ent/useruser"
	"TH0400/repo/ent/userusertopic"
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnswer        = "Answer"
	TypeTag           = "Tag"
	TypeTagTopic      = "TagTopic"
	TypeTopic         = "Topic"
	TypeUser          = "User"
	TypeUserTopic     = "UserTopic"
	TypeUserUser      = "UserUser"
	TypeUserUserTopic = "UserUserTopic"
)

// AnswerMutation represents an operation that mutate the Answers
// nodes in the graph.
type AnswerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	content       *string
	created_at    *time.Time
	updated_at    *time.Time
	is_deleted    *bool
	creater_id    *int
	addcreater_id *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Answer, error)
}

var _ ent.Mutation = (*AnswerMutation)(nil)

// answerOption allows to manage the mutation configuration using functional options.
type answerOption func(*AnswerMutation)

// newAnswerMutation creates new mutation for $n.Name.
func newAnswerMutation(c config, op Op, opts ...answerOption) *AnswerMutation {
	m := &AnswerMutation{
		config:        c,
		op:            op,
		typ:           TypeAnswer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnswerID sets the id field of the mutation.
func withAnswerID(id int) answerOption {
	return func(m *AnswerMutation) {
		var (
			err   error
			once  sync.Once
			value *Answer
		)
		m.oldValue = func(ctx context.Context) (*Answer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Answer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnswer sets the old Answer of the mutation.
func withAnswer(node *Answer) answerOption {
	return func(m *AnswerMutation) {
		m.oldValue = func(context.Context) (*Answer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnswerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnswerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Answer creation.
func (m *AnswerMutation) SetID(id int) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *AnswerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetContent sets the content field.
func (m *AnswerMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the content value in the mutation.
func (m *AnswerMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old content value of the Answer.
// If the Answer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AnswerMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent reset all changes of the "content" field.
func (m *AnswerMutation) ResetContent() {
	m.content = nil
}

// SetCreatedAt sets the created_at field.
func (m *AnswerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *AnswerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the Answer.
// If the Answer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AnswerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *AnswerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *AnswerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *AnswerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the Answer.
// If the Answer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AnswerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *AnswerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetIsDeleted sets the is_deleted field.
func (m *AnswerMutation) SetIsDeleted(b bool) {
	m.is_deleted = &b
}

// IsDeleted returns the is_deleted value in the mutation.
func (m *AnswerMutation) IsDeleted() (r bool, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old is_deleted value of the Answer.
// If the Answer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AnswerMutation) OldIsDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsDeleted is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// ResetIsDeleted reset all changes of the "is_deleted" field.
func (m *AnswerMutation) ResetIsDeleted() {
	m.is_deleted = nil
}

// SetCreaterID sets the creater_id field.
func (m *AnswerMutation) SetCreaterID(i int) {
	m.creater_id = &i
	m.addcreater_id = nil
}

// CreaterID returns the creater_id value in the mutation.
func (m *AnswerMutation) CreaterID() (r int, exists bool) {
	v := m.creater_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCreaterID returns the old creater_id value of the Answer.
// If the Answer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AnswerMutation) OldCreaterID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreaterID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreaterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreaterID: %w", err)
	}
	return oldValue.CreaterID, nil
}

// AddCreaterID adds i to creater_id.
func (m *AnswerMutation) AddCreaterID(i int) {
	if m.addcreater_id != nil {
		*m.addcreater_id += i
	} else {
		m.addcreater_id = &i
	}
}

// AddedCreaterID returns the value that was added to the creater_id field in this mutation.
func (m *AnswerMutation) AddedCreaterID() (r int, exists bool) {
	v := m.addcreater_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreaterID reset all changes of the "creater_id" field.
func (m *AnswerMutation) ResetCreaterID() {
	m.creater_id = nil
	m.addcreater_id = nil
}

// Op returns the operation name.
func (m *AnswerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Answer).
func (m *AnswerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *AnswerMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.content != nil {
		fields = append(fields, answer.FieldContent)
	}
	if m.created_at != nil {
		fields = append(fields, answer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, answer.FieldUpdatedAt)
	}
	if m.is_deleted != nil {
		fields = append(fields, answer.FieldIsDeleted)
	}
	if m.creater_id != nil {
		fields = append(fields, answer.FieldCreaterID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *AnswerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case answer.FieldContent:
		return m.Content()
	case answer.FieldCreatedAt:
		return m.CreatedAt()
	case answer.FieldUpdatedAt:
		return m.UpdatedAt()
	case answer.FieldIsDeleted:
		return m.IsDeleted()
	case answer.FieldCreaterID:
		return m.CreaterID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *AnswerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case answer.FieldContent:
		return m.OldContent(ctx)
	case answer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case answer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case answer.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	case answer.FieldCreaterID:
		return m.OldCreaterID(ctx)
	}
	return nil, fmt.Errorf("unknown Answer field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AnswerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case answer.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case answer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case answer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case answer.FieldIsDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	case answer.FieldCreaterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreaterID(v)
		return nil
	}
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *AnswerMutation) AddedFields() []string {
	var fields []string
	if m.addcreater_id != nil {
		fields = append(fields, answer.FieldCreaterID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *AnswerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case answer.FieldCreaterID:
		return m.AddedCreaterID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AnswerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case answer.FieldCreaterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreaterID(v)
		return nil
	}
	return fmt.Errorf("unknown Answer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *AnswerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *AnswerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnswerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Answer nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *AnswerMutation) ResetField(name string) error {
	switch name {
	case answer.FieldContent:
		m.ResetContent()
		return nil
	case answer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case answer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case answer.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	case answer.FieldCreaterID:
		m.ResetCreaterID()
		return nil
	}
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *AnswerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *AnswerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *AnswerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *AnswerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *AnswerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *AnswerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *AnswerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Answer unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *AnswerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Answer edge %s", name)
}

// TagMutation represents an operation that mutate the Tags
// nodes in the graph.
type TagMutation struct {
	config
	op            Op
	typ           string
	id            *int
	tag_name      *string
	created_at    *time.Time
	baned         *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Tag, error)
}

var _ ent.Mutation = (*TagMutation)(nil)

// tagOption allows to manage the mutation configuration using functional options.
type tagOption func(*TagMutation)

// newTagMutation creates new mutation for $n.Name.
func newTagMutation(c config, op Op, opts ...tagOption) *TagMutation {
	m := &TagMutation{
		config:        c,
		op:            op,
		typ:           TypeTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTagID sets the id field of the mutation.
func withTagID(id int) tagOption {
	return func(m *TagMutation) {
		var (
			err   error
			once  sync.Once
			value *Tag
		)
		m.oldValue = func(ctx context.Context) (*Tag, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTag sets the old Tag of the mutation.
func withTag(node *Tag) tagOption {
	return func(m *TagMutation) {
		m.oldValue = func(context.Context) (*Tag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Tag creation.
func (m *TagMutation) SetID(id int) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *TagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTagName sets the tag_name field.
func (m *TagMutation) SetTagName(s string) {
	m.tag_name = &s
}

// TagName returns the tag_name value in the mutation.
func (m *TagMutation) TagName() (r string, exists bool) {
	v := m.tag_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTagName returns the old tag_name value of the Tag.
// If the Tag object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TagMutation) OldTagName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTagName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTagName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTagName: %w", err)
	}
	return oldValue.TagName, nil
}

// ResetTagName reset all changes of the "tag_name" field.
func (m *TagMutation) ResetTagName() {
	m.tag_name = nil
}

// SetCreatedAt sets the created_at field.
func (m *TagMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *TagMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the Tag.
// If the Tag object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TagMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *TagMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetBaned sets the baned field.
func (m *TagMutation) SetBaned(b bool) {
	m.baned = &b
}

// Baned returns the baned value in the mutation.
func (m *TagMutation) Baned() (r bool, exists bool) {
	v := m.baned
	if v == nil {
		return
	}
	return *v, true
}

// OldBaned returns the old baned value of the Tag.
// If the Tag object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TagMutation) OldBaned(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBaned is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBaned requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBaned: %w", err)
	}
	return oldValue.Baned, nil
}

// ResetBaned reset all changes of the "baned" field.
func (m *TagMutation) ResetBaned() {
	m.baned = nil
}

// Op returns the operation name.
func (m *TagMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tag).
func (m *TagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *TagMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.tag_name != nil {
		fields = append(fields, tag.FieldTagName)
	}
	if m.created_at != nil {
		fields = append(fields, tag.FieldCreatedAt)
	}
	if m.baned != nil {
		fields = append(fields, tag.FieldBaned)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *TagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tag.FieldTagName:
		return m.TagName()
	case tag.FieldCreatedAt:
		return m.CreatedAt()
	case tag.FieldBaned:
		return m.Baned()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *TagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tag.FieldTagName:
		return m.OldTagName(ctx)
	case tag.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tag.FieldBaned:
		return m.OldBaned(ctx)
	}
	return nil, fmt.Errorf("unknown Tag field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tag.FieldTagName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTagName(v)
		return nil
	case tag.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tag.FieldBaned:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBaned(v)
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *TagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *TagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *TagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *TagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *TagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tag nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *TagMutation) ResetField(name string) error {
	switch name {
	case tag.FieldTagName:
		m.ResetTagName()
		return nil
	case tag.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tag.FieldBaned:
		m.ResetBaned()
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *TagMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *TagMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *TagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *TagMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *TagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *TagMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *TagMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Tag unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *TagMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Tag edge %s", name)
}

// TagTopicMutation represents an operation that mutate the TagTopics
// nodes in the graph.
type TagTopicMutation struct {
	config
	op            Op
	typ           string
	id            *int
	tag_id        *int
	addtag_id     *int
	topic_id      *int
	addtopic_id   *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TagTopic, error)
}

var _ ent.Mutation = (*TagTopicMutation)(nil)

// tagtopicOption allows to manage the mutation configuration using functional options.
type tagtopicOption func(*TagTopicMutation)

// newTagTopicMutation creates new mutation for $n.Name.
func newTagTopicMutation(c config, op Op, opts ...tagtopicOption) *TagTopicMutation {
	m := &TagTopicMutation{
		config:        c,
		op:            op,
		typ:           TypeTagTopic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTagTopicID sets the id field of the mutation.
func withTagTopicID(id int) tagtopicOption {
	return func(m *TagTopicMutation) {
		var (
			err   error
			once  sync.Once
			value *TagTopic
		)
		m.oldValue = func(ctx context.Context) (*TagTopic, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TagTopic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTagTopic sets the old TagTopic of the mutation.
func withTagTopic(node *TagTopic) tagtopicOption {
	return func(m *TagTopicMutation) {
		m.oldValue = func(context.Context) (*TagTopic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TagTopicMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TagTopicMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on TagTopic creation.
func (m *TagTopicMutation) SetID(id int) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *TagTopicMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTagID sets the tag_id field.
func (m *TagTopicMutation) SetTagID(i int) {
	m.tag_id = &i
	m.addtag_id = nil
}

// TagID returns the tag_id value in the mutation.
func (m *TagTopicMutation) TagID() (r int, exists bool) {
	v := m.tag_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTagID returns the old tag_id value of the TagTopic.
// If the TagTopic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TagTopicMutation) OldTagID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTagID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTagID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTagID: %w", err)
	}
	return oldValue.TagID, nil
}

// AddTagID adds i to tag_id.
func (m *TagTopicMutation) AddTagID(i int) {
	if m.addtag_id != nil {
		*m.addtag_id += i
	} else {
		m.addtag_id = &i
	}
}

// AddedTagID returns the value that was added to the tag_id field in this mutation.
func (m *TagTopicMutation) AddedTagID() (r int, exists bool) {
	v := m.addtag_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTagID reset all changes of the "tag_id" field.
func (m *TagTopicMutation) ResetTagID() {
	m.tag_id = nil
	m.addtag_id = nil
}

// SetTopicID sets the topic_id field.
func (m *TagTopicMutation) SetTopicID(i int) {
	m.topic_id = &i
	m.addtopic_id = nil
}

// TopicID returns the topic_id value in the mutation.
func (m *TagTopicMutation) TopicID() (r int, exists bool) {
	v := m.topic_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTopicID returns the old topic_id value of the TagTopic.
// If the TagTopic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TagTopicMutation) OldTopicID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTopicID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTopicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopicID: %w", err)
	}
	return oldValue.TopicID, nil
}

// AddTopicID adds i to topic_id.
func (m *TagTopicMutation) AddTopicID(i int) {
	if m.addtopic_id != nil {
		*m.addtopic_id += i
	} else {
		m.addtopic_id = &i
	}
}

// AddedTopicID returns the value that was added to the topic_id field in this mutation.
func (m *TagTopicMutation) AddedTopicID() (r int, exists bool) {
	v := m.addtopic_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTopicID reset all changes of the "topic_id" field.
func (m *TagTopicMutation) ResetTopicID() {
	m.topic_id = nil
	m.addtopic_id = nil
}

// Op returns the operation name.
func (m *TagTopicMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TagTopic).
func (m *TagTopicMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *TagTopicMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.tag_id != nil {
		fields = append(fields, tagtopic.FieldTagID)
	}
	if m.topic_id != nil {
		fields = append(fields, tagtopic.FieldTopicID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *TagTopicMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tagtopic.FieldTagID:
		return m.TagID()
	case tagtopic.FieldTopicID:
		return m.TopicID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *TagTopicMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tagtopic.FieldTagID:
		return m.OldTagID(ctx)
	case tagtopic.FieldTopicID:
		return m.OldTopicID(ctx)
	}
	return nil, fmt.Errorf("unknown TagTopic field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TagTopicMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tagtopic.FieldTagID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTagID(v)
		return nil
	case tagtopic.FieldTopicID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopicID(v)
		return nil
	}
	return fmt.Errorf("unknown TagTopic field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *TagTopicMutation) AddedFields() []string {
	var fields []string
	if m.addtag_id != nil {
		fields = append(fields, tagtopic.FieldTagID)
	}
	if m.addtopic_id != nil {
		fields = append(fields, tagtopic.FieldTopicID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *TagTopicMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case tagtopic.FieldTagID:
		return m.AddedTagID()
	case tagtopic.FieldTopicID:
		return m.AddedTopicID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TagTopicMutation) AddField(name string, value ent.Value) error {
	switch name {
	case tagtopic.FieldTagID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTagID(v)
		return nil
	case tagtopic.FieldTopicID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTopicID(v)
		return nil
	}
	return fmt.Errorf("unknown TagTopic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *TagTopicMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *TagTopicMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *TagTopicMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TagTopic nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *TagTopicMutation) ResetField(name string) error {
	switch name {
	case tagtopic.FieldTagID:
		m.ResetTagID()
		return nil
	case tagtopic.FieldTopicID:
		m.ResetTopicID()
		return nil
	}
	return fmt.Errorf("unknown TagTopic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *TagTopicMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *TagTopicMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *TagTopicMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *TagTopicMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *TagTopicMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *TagTopicMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *TagTopicMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TagTopic unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *TagTopicMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TagTopic edge %s", name)
}

// TopicMutation represents an operation that mutate the Topics
// nodes in the graph.
type TopicMutation struct {
	config
	op            Op
	typ           string
	id            *int
	title         *string
	content       *string
	is_released   *bool
	created_at    *time.Time
	updated_at    *time.Time
	creater_id    *int
	addcreater_id *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Topic, error)
}

var _ ent.Mutation = (*TopicMutation)(nil)

// topicOption allows to manage the mutation configuration using functional options.
type topicOption func(*TopicMutation)

// newTopicMutation creates new mutation for $n.Name.
func newTopicMutation(c config, op Op, opts ...topicOption) *TopicMutation {
	m := &TopicMutation{
		config:        c,
		op:            op,
		typ:           TypeTopic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTopicID sets the id field of the mutation.
func withTopicID(id int) topicOption {
	return func(m *TopicMutation) {
		var (
			err   error
			once  sync.Once
			value *Topic
		)
		m.oldValue = func(ctx context.Context) (*Topic, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Topic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTopic sets the old Topic of the mutation.
func withTopic(node *Topic) topicOption {
	return func(m *TopicMutation) {
		m.oldValue = func(context.Context) (*Topic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TopicMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TopicMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on Topic creation.
func (m *TopicMutation) SetID(id int) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *TopicMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the title field.
func (m *TopicMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the title value in the mutation.
func (m *TopicMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old title value of the Topic.
// If the Topic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TopicMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle reset all changes of the "title" field.
func (m *TopicMutation) ResetTitle() {
	m.title = nil
}

// SetContent sets the content field.
func (m *TopicMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the content value in the mutation.
func (m *TopicMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old content value of the Topic.
// If the Topic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TopicMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent reset all changes of the "content" field.
func (m *TopicMutation) ResetContent() {
	m.content = nil
}

// SetIsReleased sets the is_released field.
func (m *TopicMutation) SetIsReleased(b bool) {
	m.is_released = &b
}

// IsReleased returns the is_released value in the mutation.
func (m *TopicMutation) IsReleased() (r bool, exists bool) {
	v := m.is_released
	if v == nil {
		return
	}
	return *v, true
}

// OldIsReleased returns the old is_released value of the Topic.
// If the Topic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TopicMutation) OldIsReleased(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsReleased is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsReleased requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsReleased: %w", err)
	}
	return oldValue.IsReleased, nil
}

// ResetIsReleased reset all changes of the "is_released" field.
func (m *TopicMutation) ResetIsReleased() {
	m.is_released = nil
}

// SetCreatedAt sets the created_at field.
func (m *TopicMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *TopicMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the Topic.
// If the Topic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TopicMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *TopicMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *TopicMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *TopicMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the Topic.
// If the Topic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TopicMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *TopicMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreaterID sets the creater_id field.
func (m *TopicMutation) SetCreaterID(i int) {
	m.creater_id = &i
	m.addcreater_id = nil
}

// CreaterID returns the creater_id value in the mutation.
func (m *TopicMutation) CreaterID() (r int, exists bool) {
	v := m.creater_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCreaterID returns the old creater_id value of the Topic.
// If the Topic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TopicMutation) OldCreaterID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreaterID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreaterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreaterID: %w", err)
	}
	return oldValue.CreaterID, nil
}

// AddCreaterID adds i to creater_id.
func (m *TopicMutation) AddCreaterID(i int) {
	if m.addcreater_id != nil {
		*m.addcreater_id += i
	} else {
		m.addcreater_id = &i
	}
}

// AddedCreaterID returns the value that was added to the creater_id field in this mutation.
func (m *TopicMutation) AddedCreaterID() (r int, exists bool) {
	v := m.addcreater_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreaterID reset all changes of the "creater_id" field.
func (m *TopicMutation) ResetCreaterID() {
	m.creater_id = nil
	m.addcreater_id = nil
}

// Op returns the operation name.
func (m *TopicMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Topic).
func (m *TopicMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *TopicMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.title != nil {
		fields = append(fields, topic.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, topic.FieldContent)
	}
	if m.is_released != nil {
		fields = append(fields, topic.FieldIsReleased)
	}
	if m.created_at != nil {
		fields = append(fields, topic.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, topic.FieldUpdatedAt)
	}
	if m.creater_id != nil {
		fields = append(fields, topic.FieldCreaterID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *TopicMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case topic.FieldTitle:
		return m.Title()
	case topic.FieldContent:
		return m.Content()
	case topic.FieldIsReleased:
		return m.IsReleased()
	case topic.FieldCreatedAt:
		return m.CreatedAt()
	case topic.FieldUpdatedAt:
		return m.UpdatedAt()
	case topic.FieldCreaterID:
		return m.CreaterID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *TopicMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case topic.FieldTitle:
		return m.OldTitle(ctx)
	case topic.FieldContent:
		return m.OldContent(ctx)
	case topic.FieldIsReleased:
		return m.OldIsReleased(ctx)
	case topic.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case topic.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case topic.FieldCreaterID:
		return m.OldCreaterID(ctx)
	}
	return nil, fmt.Errorf("unknown Topic field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TopicMutation) SetField(name string, value ent.Value) error {
	switch name {
	case topic.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case topic.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case topic.FieldIsReleased:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsReleased(v)
		return nil
	case topic.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case topic.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case topic.FieldCreaterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreaterID(v)
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *TopicMutation) AddedFields() []string {
	var fields []string
	if m.addcreater_id != nil {
		fields = append(fields, topic.FieldCreaterID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *TopicMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case topic.FieldCreaterID:
		return m.AddedCreaterID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TopicMutation) AddField(name string, value ent.Value) error {
	switch name {
	case topic.FieldCreaterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreaterID(v)
		return nil
	}
	return fmt.Errorf("unknown Topic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *TopicMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *TopicMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *TopicMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Topic nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *TopicMutation) ResetField(name string) error {
	switch name {
	case topic.FieldTitle:
		m.ResetTitle()
		return nil
	case topic.FieldContent:
		m.ResetContent()
		return nil
	case topic.FieldIsReleased:
		m.ResetIsReleased()
		return nil
	case topic.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case topic.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case topic.FieldCreaterID:
		m.ResetCreaterID()
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *TopicMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *TopicMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *TopicMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *TopicMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *TopicMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *TopicMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *TopicMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Topic unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *TopicMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Topic edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	user_name     *string
	password      *string
	school        *string
	level         *int
	addlevel      *int
	likes         *int
	addlikes      *int
	views         *int
	addviews      *int
	created_at    *time.Time
	updated_at    *time.Time
	is_deleted    *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on User creation.
func (m *UserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserName sets the user_name field.
func (m *UserMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the user_name value in the mutation.
func (m *UserMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old user_name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName reset all changes of the "user_name" field.
func (m *UserMutation) ResetUserName() {
	m.user_name = nil
}

// SetPassword sets the password field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the password value in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old password value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetSchool sets the school field.
func (m *UserMutation) SetSchool(s string) {
	m.school = &s
}

// School returns the school value in the mutation.
func (m *UserMutation) School() (r string, exists bool) {
	v := m.school
	if v == nil {
		return
	}
	return *v, true
}

// OldSchool returns the old school value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldSchool(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSchool is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSchool requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSchool: %w", err)
	}
	return oldValue.School, nil
}

// ClearSchool clears the value of school.
func (m *UserMutation) ClearSchool() {
	m.school = nil
	m.clearedFields[user.FieldSchool] = struct{}{}
}

// SchoolCleared returns if the field school was cleared in this mutation.
func (m *UserMutation) SchoolCleared() bool {
	_, ok := m.clearedFields[user.FieldSchool]
	return ok
}

// ResetSchool reset all changes of the "school" field.
func (m *UserMutation) ResetSchool() {
	m.school = nil
	delete(m.clearedFields, user.FieldSchool)
}

// SetLevel sets the level field.
func (m *UserMutation) SetLevel(i int) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the level value in the mutation.
func (m *UserMutation) Level() (r int, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old level value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldLevel(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLevel is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// AddLevel adds i to level.
func (m *UserMutation) AddLevel(i int) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the level field in this mutation.
func (m *UserMutation) AddedLevel() (r int, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevel reset all changes of the "level" field.
func (m *UserMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// SetLikes sets the likes field.
func (m *UserMutation) SetLikes(i int) {
	m.likes = &i
	m.addlikes = nil
}

// Likes returns the likes value in the mutation.
func (m *UserMutation) Likes() (r int, exists bool) {
	v := m.likes
	if v == nil {
		return
	}
	return *v, true
}

// OldLikes returns the old likes value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldLikes(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLikes is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLikes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLikes: %w", err)
	}
	return oldValue.Likes, nil
}

// AddLikes adds i to likes.
func (m *UserMutation) AddLikes(i int) {
	if m.addlikes != nil {
		*m.addlikes += i
	} else {
		m.addlikes = &i
	}
}

// AddedLikes returns the value that was added to the likes field in this mutation.
func (m *UserMutation) AddedLikes() (r int, exists bool) {
	v := m.addlikes
	if v == nil {
		return
	}
	return *v, true
}

// ResetLikes reset all changes of the "likes" field.
func (m *UserMutation) ResetLikes() {
	m.likes = nil
	m.addlikes = nil
}

// SetViews sets the views field.
func (m *UserMutation) SetViews(i int) {
	m.views = &i
	m.addviews = nil
}

// Views returns the views value in the mutation.
func (m *UserMutation) Views() (r int, exists bool) {
	v := m.views
	if v == nil {
		return
	}
	return *v, true
}

// OldViews returns the old views value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldViews(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldViews is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldViews requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldViews: %w", err)
	}
	return oldValue.Views, nil
}

// AddViews adds i to views.
func (m *UserMutation) AddViews(i int) {
	if m.addviews != nil {
		*m.addviews += i
	} else {
		m.addviews = &i
	}
}

// AddedViews returns the value that was added to the views field in this mutation.
func (m *UserMutation) AddedViews() (r int, exists bool) {
	v := m.addviews
	if v == nil {
		return
	}
	return *v, true
}

// ResetViews reset all changes of the "views" field.
func (m *UserMutation) ResetViews() {
	m.views = nil
	m.addviews = nil
}

// SetCreatedAt sets the created_at field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetIsDeleted sets the is_deleted field.
func (m *UserMutation) SetIsDeleted(b bool) {
	m.is_deleted = &b
}

// IsDeleted returns the is_deleted value in the mutation.
func (m *UserMutation) IsDeleted() (r bool, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old is_deleted value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldIsDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsDeleted is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// ResetIsDeleted reset all changes of the "is_deleted" field.
func (m *UserMutation) ResetIsDeleted() {
	m.is_deleted = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.user_name != nil {
		fields = append(fields, user.FieldUserName)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.school != nil {
		fields = append(fields, user.FieldSchool)
	}
	if m.level != nil {
		fields = append(fields, user.FieldLevel)
	}
	if m.likes != nil {
		fields = append(fields, user.FieldLikes)
	}
	if m.views != nil {
		fields = append(fields, user.FieldViews)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.is_deleted != nil {
		fields = append(fields, user.FieldIsDeleted)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserName:
		return m.UserName()
	case user.FieldPassword:
		return m.Password()
	case user.FieldSchool:
		return m.School()
	case user.FieldLevel:
		return m.Level()
	case user.FieldLikes:
		return m.Likes()
	case user.FieldViews:
		return m.Views()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldIsDeleted:
		return m.IsDeleted()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserName:
		return m.OldUserName(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldSchool:
		return m.OldSchool(ctx)
	case user.FieldLevel:
		return m.OldLevel(ctx)
	case user.FieldLikes:
		return m.OldLikes(ctx)
	case user.FieldViews:
		return m.OldViews(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldSchool:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSchool(v)
		return nil
	case user.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case user.FieldLikes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLikes(v)
		return nil
	case user.FieldViews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetViews(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldIsDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addlevel != nil {
		fields = append(fields, user.FieldLevel)
	}
	if m.addlikes != nil {
		fields = append(fields, user.FieldLikes)
	}
	if m.addviews != nil {
		fields = append(fields, user.FieldViews)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldLevel:
		return m.AddedLevel()
	case user.FieldLikes:
		return m.AddedLikes()
	case user.FieldViews:
		return m.AddedViews()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	case user.FieldLikes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLikes(v)
		return nil
	case user.FieldViews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddViews(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldSchool) {
		fields = append(fields, user.FieldSchool)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldSchool:
		m.ClearSchool()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserName:
		m.ResetUserName()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldSchool:
		m.ResetSchool()
		return nil
	case user.FieldLevel:
		m.ResetLevel()
		return nil
	case user.FieldLikes:
		m.ResetLikes()
		return nil
	case user.FieldViews:
		m.ResetViews()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// UserTopicMutation represents an operation that mutate the UserTopics
// nodes in the graph.
type UserTopicMutation struct {
	config
	op            Op
	typ           string
	id            *int
	user_id       *int
	adduser_id    *int
	topic_id      *int
	addtopic_id   *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserTopic, error)
}

var _ ent.Mutation = (*UserTopicMutation)(nil)

// usertopicOption allows to manage the mutation configuration using functional options.
type usertopicOption func(*UserTopicMutation)

// newUserTopicMutation creates new mutation for $n.Name.
func newUserTopicMutation(c config, op Op, opts ...usertopicOption) *UserTopicMutation {
	m := &UserTopicMutation{
		config:        c,
		op:            op,
		typ:           TypeUserTopic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserTopicID sets the id field of the mutation.
func withUserTopicID(id int) usertopicOption {
	return func(m *UserTopicMutation) {
		var (
			err   error
			once  sync.Once
			value *UserTopic
		)
		m.oldValue = func(ctx context.Context) (*UserTopic, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserTopic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserTopic sets the old UserTopic of the mutation.
func withUserTopic(node *UserTopic) usertopicOption {
	return func(m *UserTopicMutation) {
		m.oldValue = func(context.Context) (*UserTopic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserTopicMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserTopicMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on UserTopic creation.
func (m *UserTopicMutation) SetID(id int) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserTopicMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserID sets the user_id field.
func (m *UserTopicMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the user_id value in the mutation.
func (m *UserTopicMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old user_id value of the UserTopic.
// If the UserTopic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserTopicMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to user_id.
func (m *UserTopicMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the user_id field in this mutation.
func (m *UserTopicMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID reset all changes of the "user_id" field.
func (m *UserTopicMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetTopicID sets the topic_id field.
func (m *UserTopicMutation) SetTopicID(i int) {
	m.topic_id = &i
	m.addtopic_id = nil
}

// TopicID returns the topic_id value in the mutation.
func (m *UserTopicMutation) TopicID() (r int, exists bool) {
	v := m.topic_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTopicID returns the old topic_id value of the UserTopic.
// If the UserTopic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserTopicMutation) OldTopicID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTopicID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTopicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopicID: %w", err)
	}
	return oldValue.TopicID, nil
}

// AddTopicID adds i to topic_id.
func (m *UserTopicMutation) AddTopicID(i int) {
	if m.addtopic_id != nil {
		*m.addtopic_id += i
	} else {
		m.addtopic_id = &i
	}
}

// AddedTopicID returns the value that was added to the topic_id field in this mutation.
func (m *UserTopicMutation) AddedTopicID() (r int, exists bool) {
	v := m.addtopic_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTopicID reset all changes of the "topic_id" field.
func (m *UserTopicMutation) ResetTopicID() {
	m.topic_id = nil
	m.addtopic_id = nil
}

// Op returns the operation name.
func (m *UserTopicMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserTopic).
func (m *UserTopicMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserTopicMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.user_id != nil {
		fields = append(fields, usertopic.FieldUserID)
	}
	if m.topic_id != nil {
		fields = append(fields, usertopic.FieldTopicID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserTopicMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usertopic.FieldUserID:
		return m.UserID()
	case usertopic.FieldTopicID:
		return m.TopicID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserTopicMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usertopic.FieldUserID:
		return m.OldUserID(ctx)
	case usertopic.FieldTopicID:
		return m.OldTopicID(ctx)
	}
	return nil, fmt.Errorf("unknown UserTopic field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserTopicMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usertopic.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case usertopic.FieldTopicID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopicID(v)
		return nil
	}
	return fmt.Errorf("unknown UserTopic field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserTopicMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, usertopic.FieldUserID)
	}
	if m.addtopic_id != nil {
		fields = append(fields, usertopic.FieldTopicID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserTopicMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usertopic.FieldUserID:
		return m.AddedUserID()
	case usertopic.FieldTopicID:
		return m.AddedTopicID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserTopicMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usertopic.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case usertopic.FieldTopicID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTopicID(v)
		return nil
	}
	return fmt.Errorf("unknown UserTopic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserTopicMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserTopicMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserTopicMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserTopic nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserTopicMutation) ResetField(name string) error {
	switch name {
	case usertopic.FieldUserID:
		m.ResetUserID()
		return nil
	case usertopic.FieldTopicID:
		m.ResetTopicID()
		return nil
	}
	return fmt.Errorf("unknown UserTopic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserTopicMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserTopicMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserTopicMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserTopicMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserTopicMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserTopicMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserTopicMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserTopic unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserTopicMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserTopic edge %s", name)
}

// UserUserMutation represents an operation that mutate the UserUsers
// nodes in the graph.
type UserUserMutation struct {
	config
	op             Op
	typ            string
	id             *int
	idol_id        *int
	addidol_id     *int
	follower_id    *int
	addfollower_id *int
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*UserUser, error)
}

var _ ent.Mutation = (*UserUserMutation)(nil)

// useruserOption allows to manage the mutation configuration using functional options.
type useruserOption func(*UserUserMutation)

// newUserUserMutation creates new mutation for $n.Name.
func newUserUserMutation(c config, op Op, opts ...useruserOption) *UserUserMutation {
	m := &UserUserMutation{
		config:        c,
		op:            op,
		typ:           TypeUserUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserUserID sets the id field of the mutation.
func withUserUserID(id int) useruserOption {
	return func(m *UserUserMutation) {
		var (
			err   error
			once  sync.Once
			value *UserUser
		)
		m.oldValue = func(ctx context.Context) (*UserUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserUser sets the old UserUser of the mutation.
func withUserUser(node *UserUser) useruserOption {
	return func(m *UserUserMutation) {
		m.oldValue = func(context.Context) (*UserUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on UserUser creation.
func (m *UserUserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserUserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetIdolID sets the idol_id field.
func (m *UserUserMutation) SetIdolID(i int) {
	m.idol_id = &i
	m.addidol_id = nil
}

// IdolID returns the idol_id value in the mutation.
func (m *UserUserMutation) IdolID() (r int, exists bool) {
	v := m.idol_id
	if v == nil {
		return
	}
	return *v, true
}

// OldIdolID returns the old idol_id value of the UserUser.
// If the UserUser object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserUserMutation) OldIdolID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdolID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdolID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdolID: %w", err)
	}
	return oldValue.IdolID, nil
}

// AddIdolID adds i to idol_id.
func (m *UserUserMutation) AddIdolID(i int) {
	if m.addidol_id != nil {
		*m.addidol_id += i
	} else {
		m.addidol_id = &i
	}
}

// AddedIdolID returns the value that was added to the idol_id field in this mutation.
func (m *UserUserMutation) AddedIdolID() (r int, exists bool) {
	v := m.addidol_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetIdolID reset all changes of the "idol_id" field.
func (m *UserUserMutation) ResetIdolID() {
	m.idol_id = nil
	m.addidol_id = nil
}

// SetFollowerID sets the follower_id field.
func (m *UserUserMutation) SetFollowerID(i int) {
	m.follower_id = &i
	m.addfollower_id = nil
}

// FollowerID returns the follower_id value in the mutation.
func (m *UserUserMutation) FollowerID() (r int, exists bool) {
	v := m.follower_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowerID returns the old follower_id value of the UserUser.
// If the UserUser object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserUserMutation) OldFollowerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFollowerID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFollowerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowerID: %w", err)
	}
	return oldValue.FollowerID, nil
}

// AddFollowerID adds i to follower_id.
func (m *UserUserMutation) AddFollowerID(i int) {
	if m.addfollower_id != nil {
		*m.addfollower_id += i
	} else {
		m.addfollower_id = &i
	}
}

// AddedFollowerID returns the value that was added to the follower_id field in this mutation.
func (m *UserUserMutation) AddedFollowerID() (r int, exists bool) {
	v := m.addfollower_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFollowerID reset all changes of the "follower_id" field.
func (m *UserUserMutation) ResetFollowerID() {
	m.follower_id = nil
	m.addfollower_id = nil
}

// Op returns the operation name.
func (m *UserUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserUser).
func (m *UserUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserUserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.idol_id != nil {
		fields = append(fields, useruser.FieldIdolID)
	}
	if m.follower_id != nil {
		fields = append(fields, useruser.FieldFollowerID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case useruser.FieldIdolID:
		return m.IdolID()
	case useruser.FieldFollowerID:
		return m.FollowerID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case useruser.FieldIdolID:
		return m.OldIdolID(ctx)
	case useruser.FieldFollowerID:
		return m.OldFollowerID(ctx)
	}
	return nil, fmt.Errorf("unknown UserUser field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case useruser.FieldIdolID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdolID(v)
		return nil
	case useruser.FieldFollowerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowerID(v)
		return nil
	}
	return fmt.Errorf("unknown UserUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserUserMutation) AddedFields() []string {
	var fields []string
	if m.addidol_id != nil {
		fields = append(fields, useruser.FieldIdolID)
	}
	if m.addfollower_id != nil {
		fields = append(fields, useruser.FieldFollowerID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case useruser.FieldIdolID:
		return m.AddedIdolID()
	case useruser.FieldFollowerID:
		return m.AddedFollowerID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case useruser.FieldIdolID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIdolID(v)
		return nil
	case useruser.FieldFollowerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFollowerID(v)
		return nil
	}
	return fmt.Errorf("unknown UserUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserUser nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserUserMutation) ResetField(name string) error {
	switch name {
	case useruser.FieldIdolID:
		m.ResetIdolID()
		return nil
	case useruser.FieldFollowerID:
		m.ResetFollowerID()
		return nil
	}
	return fmt.Errorf("unknown UserUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserUser unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserUser edge %s", name)
}

// UserUserTopicMutation represents an operation that mutate the UserUserTopics
// nodes in the graph.
type UserUserTopicMutation struct {
	config
	op            Op
	typ           string
	id            *int
	inviter_id    *int
	addinviter_id *int
	invited_id    *int
	addinvited_id *int
	topic_id      *int
	addtopic_id   *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserUserTopic, error)
}

var _ ent.Mutation = (*UserUserTopicMutation)(nil)

// userusertopicOption allows to manage the mutation configuration using functional options.
type userusertopicOption func(*UserUserTopicMutation)

// newUserUserTopicMutation creates new mutation for $n.Name.
func newUserUserTopicMutation(c config, op Op, opts ...userusertopicOption) *UserUserTopicMutation {
	m := &UserUserTopicMutation{
		config:        c,
		op:            op,
		typ:           TypeUserUserTopic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserUserTopicID sets the id field of the mutation.
func withUserUserTopicID(id int) userusertopicOption {
	return func(m *UserUserTopicMutation) {
		var (
			err   error
			once  sync.Once
			value *UserUserTopic
		)
		m.oldValue = func(ctx context.Context) (*UserUserTopic, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserUserTopic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserUserTopic sets the old UserUserTopic of the mutation.
func withUserUserTopic(node *UserUserTopic) userusertopicOption {
	return func(m *UserUserTopicMutation) {
		m.oldValue = func(context.Context) (*UserUserTopic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserUserTopicMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserUserTopicMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on UserUserTopic creation.
func (m *UserUserTopicMutation) SetID(id int) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserUserTopicMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetInviterID sets the inviter_id field.
func (m *UserUserTopicMutation) SetInviterID(i int) {
	m.inviter_id = &i
	m.addinviter_id = nil
}

// InviterID returns the inviter_id value in the mutation.
func (m *UserUserTopicMutation) InviterID() (r int, exists bool) {
	v := m.inviter_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInviterID returns the old inviter_id value of the UserUserTopic.
// If the UserUserTopic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserUserTopicMutation) OldInviterID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInviterID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInviterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInviterID: %w", err)
	}
	return oldValue.InviterID, nil
}

// AddInviterID adds i to inviter_id.
func (m *UserUserTopicMutation) AddInviterID(i int) {
	if m.addinviter_id != nil {
		*m.addinviter_id += i
	} else {
		m.addinviter_id = &i
	}
}

// AddedInviterID returns the value that was added to the inviter_id field in this mutation.
func (m *UserUserTopicMutation) AddedInviterID() (r int, exists bool) {
	v := m.addinviter_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetInviterID reset all changes of the "inviter_id" field.
func (m *UserUserTopicMutation) ResetInviterID() {
	m.inviter_id = nil
	m.addinviter_id = nil
}

// SetInvitedID sets the invited_id field.
func (m *UserUserTopicMutation) SetInvitedID(i int) {
	m.invited_id = &i
	m.addinvited_id = nil
}

// InvitedID returns the invited_id value in the mutation.
func (m *UserUserTopicMutation) InvitedID() (r int, exists bool) {
	v := m.invited_id
	if v == nil {
		return
	}
	return *v, true
}

// OldInvitedID returns the old invited_id value of the UserUserTopic.
// If the UserUserTopic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserUserTopicMutation) OldInvitedID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInvitedID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInvitedID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvitedID: %w", err)
	}
	return oldValue.InvitedID, nil
}

// AddInvitedID adds i to invited_id.
func (m *UserUserTopicMutation) AddInvitedID(i int) {
	if m.addinvited_id != nil {
		*m.addinvited_id += i
	} else {
		m.addinvited_id = &i
	}
}

// AddedInvitedID returns the value that was added to the invited_id field in this mutation.
func (m *UserUserTopicMutation) AddedInvitedID() (r int, exists bool) {
	v := m.addinvited_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetInvitedID reset all changes of the "invited_id" field.
func (m *UserUserTopicMutation) ResetInvitedID() {
	m.invited_id = nil
	m.addinvited_id = nil
}

// SetTopicID sets the topic_id field.
func (m *UserUserTopicMutation) SetTopicID(i int) {
	m.topic_id = &i
	m.addtopic_id = nil
}

// TopicID returns the topic_id value in the mutation.
func (m *UserUserTopicMutation) TopicID() (r int, exists bool) {
	v := m.topic_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTopicID returns the old topic_id value of the UserUserTopic.
// If the UserUserTopic object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserUserTopicMutation) OldTopicID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTopicID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTopicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopicID: %w", err)
	}
	return oldValue.TopicID, nil
}

// AddTopicID adds i to topic_id.
func (m *UserUserTopicMutation) AddTopicID(i int) {
	if m.addtopic_id != nil {
		*m.addtopic_id += i
	} else {
		m.addtopic_id = &i
	}
}

// AddedTopicID returns the value that was added to the topic_id field in this mutation.
func (m *UserUserTopicMutation) AddedTopicID() (r int, exists bool) {
	v := m.addtopic_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTopicID reset all changes of the "topic_id" field.
func (m *UserUserTopicMutation) ResetTopicID() {
	m.topic_id = nil
	m.addtopic_id = nil
}

// Op returns the operation name.
func (m *UserUserTopicMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserUserTopic).
func (m *UserUserTopicMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserUserTopicMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.inviter_id != nil {
		fields = append(fields, userusertopic.FieldInviterID)
	}
	if m.invited_id != nil {
		fields = append(fields, userusertopic.FieldInvitedID)
	}
	if m.topic_id != nil {
		fields = append(fields, userusertopic.FieldTopicID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserUserTopicMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userusertopic.FieldInviterID:
		return m.InviterID()
	case userusertopic.FieldInvitedID:
		return m.InvitedID()
	case userusertopic.FieldTopicID:
		return m.TopicID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserUserTopicMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userusertopic.FieldInviterID:
		return m.OldInviterID(ctx)
	case userusertopic.FieldInvitedID:
		return m.OldInvitedID(ctx)
	case userusertopic.FieldTopicID:
		return m.OldTopicID(ctx)
	}
	return nil, fmt.Errorf("unknown UserUserTopic field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserUserTopicMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userusertopic.FieldInviterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInviterID(v)
		return nil
	case userusertopic.FieldInvitedID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvitedID(v)
		return nil
	case userusertopic.FieldTopicID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopicID(v)
		return nil
	}
	return fmt.Errorf("unknown UserUserTopic field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserUserTopicMutation) AddedFields() []string {
	var fields []string
	if m.addinviter_id != nil {
		fields = append(fields, userusertopic.FieldInviterID)
	}
	if m.addinvited_id != nil {
		fields = append(fields, userusertopic.FieldInvitedID)
	}
	if m.addtopic_id != nil {
		fields = append(fields, userusertopic.FieldTopicID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserUserTopicMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userusertopic.FieldInviterID:
		return m.AddedInviterID()
	case userusertopic.FieldInvitedID:
		return m.AddedInvitedID()
	case userusertopic.FieldTopicID:
		return m.AddedTopicID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserUserTopicMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userusertopic.FieldInviterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInviterID(v)
		return nil
	case userusertopic.FieldInvitedID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInvitedID(v)
		return nil
	case userusertopic.FieldTopicID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTopicID(v)
		return nil
	}
	return fmt.Errorf("unknown UserUserTopic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserUserTopicMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserUserTopicMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserUserTopicMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserUserTopic nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserUserTopicMutation) ResetField(name string) error {
	switch name {
	case userusertopic.FieldInviterID:
		m.ResetInviterID()
		return nil
	case userusertopic.FieldInvitedID:
		m.ResetInvitedID()
		return nil
	case userusertopic.FieldTopicID:
		m.ResetTopicID()
		return nil
	}
	return fmt.Errorf("unknown UserUserTopic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserUserTopicMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserUserTopicMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserUserTopicMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserUserTopicMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserUserTopicMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserUserTopicMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserUserTopicMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserUserTopic unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserUserTopicMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserUserTopic edge %s", name)
}
