// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/predicate"
	"TH0400/repo/ent/userusertopic"
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserUserTopicQuery is the builder for querying UserUserTopic entities.
type UserUserTopicQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.UserUserTopic
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (uutq *UserUserTopicQuery) Where(ps ...predicate.UserUserTopic) *UserUserTopicQuery {
	uutq.predicates = append(uutq.predicates, ps...)
	return uutq
}

// Limit adds a limit step to the query.
func (uutq *UserUserTopicQuery) Limit(limit int) *UserUserTopicQuery {
	uutq.limit = &limit
	return uutq
}

// Offset adds an offset step to the query.
func (uutq *UserUserTopicQuery) Offset(offset int) *UserUserTopicQuery {
	uutq.offset = &offset
	return uutq
}

// Order adds an order step to the query.
func (uutq *UserUserTopicQuery) Order(o ...OrderFunc) *UserUserTopicQuery {
	uutq.order = append(uutq.order, o...)
	return uutq
}

// First returns the first UserUserTopic entity in the query. Returns *NotFoundError when no userusertopic was found.
func (uutq *UserUserTopicQuery) First(ctx context.Context) (*UserUserTopic, error) {
	uuts, err := uutq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(uuts) == 0 {
		return nil, &NotFoundError{userusertopic.Label}
	}
	return uuts[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uutq *UserUserTopicQuery) FirstX(ctx context.Context) *UserUserTopic {
	uut, err := uutq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return uut
}

// FirstID returns the first UserUserTopic id in the query. Returns *NotFoundError when no id was found.
func (uutq *UserUserTopicQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uutq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userusertopic.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (uutq *UserUserTopicQuery) FirstXID(ctx context.Context) int {
	id, err := uutq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only UserUserTopic entity in the query, returns an error if not exactly one entity was returned.
func (uutq *UserUserTopicQuery) Only(ctx context.Context) (*UserUserTopic, error) {
	uuts, err := uutq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(uuts) {
	case 1:
		return uuts[0], nil
	case 0:
		return nil, &NotFoundError{userusertopic.Label}
	default:
		return nil, &NotSingularError{userusertopic.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uutq *UserUserTopicQuery) OnlyX(ctx context.Context) *UserUserTopic {
	uut, err := uutq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return uut
}

// OnlyID returns the only UserUserTopic id in the query, returns an error if not exactly one id was returned.
func (uutq *UserUserTopicQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uutq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userusertopic.Label}
	default:
		err = &NotSingularError{userusertopic.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uutq *UserUserTopicQuery) OnlyIDX(ctx context.Context) int {
	id, err := uutq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserUserTopics.
func (uutq *UserUserTopicQuery) All(ctx context.Context) ([]*UserUserTopic, error) {
	if err := uutq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return uutq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (uutq *UserUserTopicQuery) AllX(ctx context.Context) []*UserUserTopic {
	uuts, err := uutq.All(ctx)
	if err != nil {
		panic(err)
	}
	return uuts
}

// IDs executes the query and returns a list of UserUserTopic ids.
func (uutq *UserUserTopicQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := uutq.Select(userusertopic.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uutq *UserUserTopicQuery) IDsX(ctx context.Context) []int {
	ids, err := uutq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uutq *UserUserTopicQuery) Count(ctx context.Context) (int, error) {
	if err := uutq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return uutq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (uutq *UserUserTopicQuery) CountX(ctx context.Context) int {
	count, err := uutq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uutq *UserUserTopicQuery) Exist(ctx context.Context) (bool, error) {
	if err := uutq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return uutq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (uutq *UserUserTopicQuery) ExistX(ctx context.Context) bool {
	exist, err := uutq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uutq *UserUserTopicQuery) Clone() *UserUserTopicQuery {
	return &UserUserTopicQuery{
		config:     uutq.config,
		limit:      uutq.limit,
		offset:     uutq.offset,
		order:      append([]OrderFunc{}, uutq.order...),
		unique:     append([]string{}, uutq.unique...),
		predicates: append([]predicate.UserUserTopic{}, uutq.predicates...),
		// clone intermediate query.
		sql:  uutq.sql.Clone(),
		path: uutq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		InviterID int `json:"inviter_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserUserTopic.Query().
//		GroupBy(userusertopic.FieldInviterID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (uutq *UserUserTopicQuery) GroupBy(field string, fields ...string) *UserUserTopicGroupBy {
	group := &UserUserTopicGroupBy{config: uutq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := uutq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return uutq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		InviterID int `json:"inviter_id,omitempty"`
//	}
//
//	client.UserUserTopic.Query().
//		Select(userusertopic.FieldInviterID).
//		Scan(ctx, &v)
//
func (uutq *UserUserTopicQuery) Select(field string, fields ...string) *UserUserTopicSelect {
	selector := &UserUserTopicSelect{config: uutq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := uutq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return uutq.sqlQuery(), nil
	}
	return selector
}

func (uutq *UserUserTopicQuery) prepareQuery(ctx context.Context) error {
	if uutq.path != nil {
		prev, err := uutq.path(ctx)
		if err != nil {
			return err
		}
		uutq.sql = prev
	}
	return nil
}

func (uutq *UserUserTopicQuery) sqlAll(ctx context.Context) ([]*UserUserTopic, error) {
	var (
		nodes = []*UserUserTopic{}
		_spec = uutq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &UserUserTopic{config: uutq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, uutq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (uutq *UserUserTopicQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uutq.querySpec()
	return sqlgraph.CountNodes(ctx, uutq.driver, _spec)
}

func (uutq *UserUserTopicQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := uutq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (uutq *UserUserTopicQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userusertopic.Table,
			Columns: userusertopic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userusertopic.FieldID,
			},
		},
		From:   uutq.sql,
		Unique: true,
	}
	if ps := uutq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uutq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uutq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uutq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uutq *UserUserTopicQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(uutq.driver.Dialect())
	t1 := builder.Table(userusertopic.Table)
	selector := builder.Select(t1.Columns(userusertopic.Columns...)...).From(t1)
	if uutq.sql != nil {
		selector = uutq.sql
		selector.Select(selector.Columns(userusertopic.Columns...)...)
	}
	for _, p := range uutq.predicates {
		p(selector)
	}
	for _, p := range uutq.order {
		p(selector)
	}
	if offset := uutq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uutq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserUserTopicGroupBy is the builder for group-by UserUserTopic entities.
type UserUserTopicGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uutgb *UserUserTopicGroupBy) Aggregate(fns ...AggregateFunc) *UserUserTopicGroupBy {
	uutgb.fns = append(uutgb.fns, fns...)
	return uutgb
}

// Scan applies the group-by query and scan the result into the given value.
func (uutgb *UserUserTopicGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := uutgb.path(ctx)
	if err != nil {
		return err
	}
	uutgb.sql = query
	return uutgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (uutgb *UserUserTopicGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := uutgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (uutgb *UserUserTopicGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(uutgb.fields) > 1 {
		return nil, errors.New("ent: UserUserTopicGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := uutgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (uutgb *UserUserTopicGroupBy) StringsX(ctx context.Context) []string {
	v, err := uutgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (uutgb *UserUserTopicGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = uutgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userusertopic.Label}
	default:
		err = fmt.Errorf("ent: UserUserTopicGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (uutgb *UserUserTopicGroupBy) StringX(ctx context.Context) string {
	v, err := uutgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (uutgb *UserUserTopicGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(uutgb.fields) > 1 {
		return nil, errors.New("ent: UserUserTopicGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := uutgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (uutgb *UserUserTopicGroupBy) IntsX(ctx context.Context) []int {
	v, err := uutgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (uutgb *UserUserTopicGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = uutgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userusertopic.Label}
	default:
		err = fmt.Errorf("ent: UserUserTopicGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (uutgb *UserUserTopicGroupBy) IntX(ctx context.Context) int {
	v, err := uutgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (uutgb *UserUserTopicGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(uutgb.fields) > 1 {
		return nil, errors.New("ent: UserUserTopicGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := uutgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (uutgb *UserUserTopicGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := uutgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (uutgb *UserUserTopicGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = uutgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userusertopic.Label}
	default:
		err = fmt.Errorf("ent: UserUserTopicGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (uutgb *UserUserTopicGroupBy) Float64X(ctx context.Context) float64 {
	v, err := uutgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (uutgb *UserUserTopicGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(uutgb.fields) > 1 {
		return nil, errors.New("ent: UserUserTopicGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := uutgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (uutgb *UserUserTopicGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := uutgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (uutgb *UserUserTopicGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = uutgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userusertopic.Label}
	default:
		err = fmt.Errorf("ent: UserUserTopicGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (uutgb *UserUserTopicGroupBy) BoolX(ctx context.Context) bool {
	v, err := uutgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uutgb *UserUserTopicGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := uutgb.sqlQuery().Query()
	if err := uutgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (uutgb *UserUserTopicGroupBy) sqlQuery() *sql.Selector {
	selector := uutgb.sql
	columns := make([]string, 0, len(uutgb.fields)+len(uutgb.fns))
	columns = append(columns, uutgb.fields...)
	for _, fn := range uutgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(uutgb.fields...)
}

// UserUserTopicSelect is the builder for select fields of UserUserTopic entities.
type UserUserTopicSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (uuts *UserUserTopicSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := uuts.path(ctx)
	if err != nil {
		return err
	}
	uuts.sql = query
	return uuts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (uuts *UserUserTopicSelect) ScanX(ctx context.Context, v interface{}) {
	if err := uuts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (uuts *UserUserTopicSelect) Strings(ctx context.Context) ([]string, error) {
	if len(uuts.fields) > 1 {
		return nil, errors.New("ent: UserUserTopicSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := uuts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (uuts *UserUserTopicSelect) StringsX(ctx context.Context) []string {
	v, err := uuts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (uuts *UserUserTopicSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = uuts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userusertopic.Label}
	default:
		err = fmt.Errorf("ent: UserUserTopicSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (uuts *UserUserTopicSelect) StringX(ctx context.Context) string {
	v, err := uuts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (uuts *UserUserTopicSelect) Ints(ctx context.Context) ([]int, error) {
	if len(uuts.fields) > 1 {
		return nil, errors.New("ent: UserUserTopicSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := uuts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (uuts *UserUserTopicSelect) IntsX(ctx context.Context) []int {
	v, err := uuts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (uuts *UserUserTopicSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = uuts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userusertopic.Label}
	default:
		err = fmt.Errorf("ent: UserUserTopicSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (uuts *UserUserTopicSelect) IntX(ctx context.Context) int {
	v, err := uuts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (uuts *UserUserTopicSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(uuts.fields) > 1 {
		return nil, errors.New("ent: UserUserTopicSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := uuts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (uuts *UserUserTopicSelect) Float64sX(ctx context.Context) []float64 {
	v, err := uuts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (uuts *UserUserTopicSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = uuts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userusertopic.Label}
	default:
		err = fmt.Errorf("ent: UserUserTopicSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (uuts *UserUserTopicSelect) Float64X(ctx context.Context) float64 {
	v, err := uuts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (uuts *UserUserTopicSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(uuts.fields) > 1 {
		return nil, errors.New("ent: UserUserTopicSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := uuts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (uuts *UserUserTopicSelect) BoolsX(ctx context.Context) []bool {
	v, err := uuts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (uuts *UserUserTopicSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = uuts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{userusertopic.Label}
	default:
		err = fmt.Errorf("ent: UserUserTopicSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (uuts *UserUserTopicSelect) BoolX(ctx context.Context) bool {
	v, err := uuts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uuts *UserUserTopicSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := uuts.sqlQuery().Query()
	if err := uuts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (uuts *UserUserTopicSelect) sqlQuery() sql.Querier {
	selector := uuts.sql
	selector.Select(selector.Columns(uuts.fields...)...)
	return selector
}
