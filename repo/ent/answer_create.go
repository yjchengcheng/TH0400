// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/answer"
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// AnswerCreate is the builder for creating a Answer entity.
type AnswerCreate struct {
	config
	mutation *AnswerMutation
	hooks    []Hook
}

// SetContent sets the content field.
func (ac *AnswerCreate) SetContent(s string) *AnswerCreate {
	ac.mutation.SetContent(s)
	return ac
}

// SetCreatedAt sets the created_at field.
func (ac *AnswerCreate) SetCreatedAt(t time.Time) *AnswerCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (ac *AnswerCreate) SetNillableCreatedAt(t *time.Time) *AnswerCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the updated_at field.
func (ac *AnswerCreate) SetUpdatedAt(t time.Time) *AnswerCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (ac *AnswerCreate) SetNillableUpdatedAt(t *time.Time) *AnswerCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetIsDeleted sets the is_deleted field.
func (ac *AnswerCreate) SetIsDeleted(b bool) *AnswerCreate {
	ac.mutation.SetIsDeleted(b)
	return ac
}

// SetCreaterID sets the creater_id field.
func (ac *AnswerCreate) SetCreaterID(i int) *AnswerCreate {
	ac.mutation.SetCreaterID(i)
	return ac
}

// SetID sets the id field.
func (ac *AnswerCreate) SetID(i int) *AnswerCreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the AnswerMutation object of the builder.
func (ac *AnswerCreate) Mutation() *AnswerMutation {
	return ac.mutation
}

// Save creates the Answer in the database.
func (ac *AnswerCreate) Save(ctx context.Context) (*Answer, error) {
	if _, ok := ac.mutation.Content(); !ok {
		return nil, &ValidationError{Name: "content", err: errors.New("ent: missing required field \"content\"")}
	}
	if v, ok := ac.mutation.Content(); ok {
		if err := answer.ContentValidator(v); err != nil {
			return nil, &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := answer.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := answer.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.IsDeleted(); !ok {
		return nil, &ValidationError{Name: "is_deleted", err: errors.New("ent: missing required field \"is_deleted\"")}
	}
	if _, ok := ac.mutation.CreaterID(); !ok {
		return nil, &ValidationError{Name: "creater_id", err: errors.New("ent: missing required field \"creater_id\"")}
	}
	var (
		err  error
		node *Answer
	)
	if len(ac.hooks) == 0 {
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnswerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AnswerCreate) SaveX(ctx context.Context) *Answer {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *AnswerCreate) sqlSave(ctx context.Context) (*Answer, error) {
	a, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if a.ID == 0 {
		id := _spec.ID.Value.(int64)
		a.ID = int(id)
	}
	return a, nil
}

func (ac *AnswerCreate) createSpec() (*Answer, *sqlgraph.CreateSpec) {
	var (
		a     = &Answer{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: answer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: answer.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		a.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: answer.FieldContent,
		})
		a.Content = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: answer.FieldCreatedAt,
		})
		a.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: answer.FieldUpdatedAt,
		})
		a.UpdatedAt = value
	}
	if value, ok := ac.mutation.IsDeleted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: answer.FieldIsDeleted,
		})
		a.IsDeleted = value
	}
	if value, ok := ac.mutation.CreaterID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: answer.FieldCreaterID,
		})
		a.CreaterID = value
	}
	return a, _spec
}
