// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/usertopic"
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// UserTopic is the model entity for the UserTopic schema.
type UserTopic struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// TopicID holds the value of the "topic_id" field.
	TopicID int `json:"topic_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserTopic) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // user_id
		&sql.NullInt64{}, // topic_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserTopic fields.
func (ut *UserTopic) assignValues(values ...interface{}) error {
	if m, n := len(values), len(usertopic.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ut.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field user_id", values[0])
	} else if value.Valid {
		ut.UserID = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field topic_id", values[1])
	} else if value.Valid {
		ut.TopicID = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this UserTopic.
// Note that, you need to call UserTopic.Unwrap() before calling this method, if this UserTopic
// was returned from a transaction, and the transaction was committed or rolled back.
func (ut *UserTopic) Update() *UserTopicUpdateOne {
	return (&UserTopicClient{config: ut.config}).UpdateOne(ut)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ut *UserTopic) Unwrap() *UserTopic {
	tx, ok := ut.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserTopic is not a transactional entity")
	}
	ut.config.driver = tx.drv
	return ut
}

// String implements the fmt.Stringer.
func (ut *UserTopic) String() string {
	var builder strings.Builder
	builder.WriteString("UserTopic(")
	builder.WriteString(fmt.Sprintf("id=%v", ut.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", ut.UserID))
	builder.WriteString(", topic_id=")
	builder.WriteString(fmt.Sprintf("%v", ut.TopicID))
	builder.WriteByte(')')
	return builder.String()
}

// UserTopics is a parsable slice of UserTopic.
type UserTopics []*UserTopic

func (ut UserTopics) config(cfg config) {
	for _i := range ut {
		ut[_i].config = cfg
	}
}
