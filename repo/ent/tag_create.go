// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/tag"
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// TagCreate is the builder for creating a Tag entity.
type TagCreate struct {
	config
	mutation *TagMutation
	hooks    []Hook
}

// SetTagName sets the tag_name field.
func (tc *TagCreate) SetTagName(s string) *TagCreate {
	tc.mutation.SetTagName(s)
	return tc
}

// SetCreatedAt sets the created_at field.
func (tc *TagCreate) SetCreatedAt(t time.Time) *TagCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (tc *TagCreate) SetNillableCreatedAt(t *time.Time) *TagCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetBaned sets the baned field.
func (tc *TagCreate) SetBaned(b bool) *TagCreate {
	tc.mutation.SetBaned(b)
	return tc
}

// SetNillableBaned sets the baned field if the given value is not nil.
func (tc *TagCreate) SetNillableBaned(b *bool) *TagCreate {
	if b != nil {
		tc.SetBaned(*b)
	}
	return tc
}

// SetID sets the id field.
func (tc *TagCreate) SetID(i int) *TagCreate {
	tc.mutation.SetID(i)
	return tc
}

// Mutation returns the TagMutation object of the builder.
func (tc *TagCreate) Mutation() *TagMutation {
	return tc.mutation
}

// Save creates the Tag in the database.
func (tc *TagCreate) Save(ctx context.Context) (*Tag, error) {
	if _, ok := tc.mutation.TagName(); !ok {
		return nil, &ValidationError{Name: "tag_name", err: errors.New("ent: missing required field \"tag_name\"")}
	}
	if v, ok := tc.mutation.TagName(); ok {
		if err := tag.TagNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "tag_name", err: fmt.Errorf("ent: validator failed for field \"tag_name\": %w", err)}
		}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := tag.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.Baned(); !ok {
		v := tag.DefaultBaned
		tc.mutation.SetBaned(v)
	}
	var (
		err  error
		node *Tag
	)
	if len(tc.hooks) == 0 {
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TagCreate) SaveX(ctx context.Context) *Tag {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TagCreate) sqlSave(ctx context.Context) (*Tag, error) {
	t, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if t.ID == 0 {
		id := _spec.ID.Value.(int64)
		t.ID = int(id)
	}
	return t, nil
}

func (tc *TagCreate) createSpec() (*Tag, *sqlgraph.CreateSpec) {
	var (
		t     = &Tag{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tag.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tag.FieldID,
			},
		}
	)
	if id, ok := tc.mutation.ID(); ok {
		t.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.TagName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tag.FieldTagName,
		})
		t.TagName = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: tag.FieldCreatedAt,
		})
		t.CreatedAt = value
	}
	if value, ok := tc.mutation.Baned(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tag.FieldBaned,
		})
		t.Baned = value
	}
	return t, _spec
}
