// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/useruser"
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// UserUser is the model entity for the UserUser schema.
type UserUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IdolID holds the value of the "idol_id" field.
	IdolID int `json:"idol_id,omitempty"`
	// FollowerID holds the value of the "follower_id" field.
	FollowerID int `json:"follower_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserUser) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // idol_id
		&sql.NullInt64{}, // follower_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserUser fields.
func (uu *UserUser) assignValues(values ...interface{}) error {
	if m, n := len(values), len(useruser.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	uu.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field idol_id", values[0])
	} else if value.Valid {
		uu.IdolID = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field follower_id", values[1])
	} else if value.Valid {
		uu.FollowerID = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this UserUser.
// Note that, you need to call UserUser.Unwrap() before calling this method, if this UserUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (uu *UserUser) Update() *UserUserUpdateOne {
	return (&UserUserClient{config: uu.config}).UpdateOne(uu)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (uu *UserUser) Unwrap() *UserUser {
	tx, ok := uu.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserUser is not a transactional entity")
	}
	uu.config.driver = tx.drv
	return uu
}

// String implements the fmt.Stringer.
func (uu *UserUser) String() string {
	var builder strings.Builder
	builder.WriteString("UserUser(")
	builder.WriteString(fmt.Sprintf("id=%v", uu.ID))
	builder.WriteString(", idol_id=")
	builder.WriteString(fmt.Sprintf("%v", uu.IdolID))
	builder.WriteString(", follower_id=")
	builder.WriteString(fmt.Sprintf("%v", uu.FollowerID))
	builder.WriteByte(')')
	return builder.String()
}

// UserUsers is a parsable slice of UserUser.
type UserUsers []*UserUser

func (uu UserUsers) config(cfg config) {
	for _i := range uu {
		uu[_i].config = cfg
	}
}
