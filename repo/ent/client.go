// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"TH0400/repo/ent/migrate"

	"TH0400/repo/ent/answer"
	"TH0400/repo/ent/tag"
	"TH0400/repo/ent/tagtopic"
	"TH0400/repo/ent/topic"
	"TH0400/repo/ent/user"
	"TH0400/repo/ent/usertopic"
	"TH0400/repo/ent/useruser"
	"TH0400/repo/ent/userusertopic"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Answer is the client for interacting with the Answer builders.
	Answer *AnswerClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// TagTopic is the client for interacting with the TagTopic builders.
	TagTopic *TagTopicClient
	// Topic is the client for interacting with the Topic builders.
	Topic *TopicClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserTopic is the client for interacting with the UserTopic builders.
	UserTopic *UserTopicClient
	// UserUser is the client for interacting with the UserUser builders.
	UserUser *UserUserClient
	// UserUserTopic is the client for interacting with the UserUserTopic builders.
	UserUserTopic *UserUserTopicClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Answer = NewAnswerClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.TagTopic = NewTagTopicClient(c.config)
	c.Topic = NewTopicClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserTopic = NewUserTopicClient(c.config)
	c.UserUser = NewUserUserClient(c.config)
	c.UserUserTopic = NewUserUserTopicClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Answer:        NewAnswerClient(cfg),
		Tag:           NewTagClient(cfg),
		TagTopic:      NewTagTopicClient(cfg),
		Topic:         NewTopicClient(cfg),
		User:          NewUserClient(cfg),
		UserTopic:     NewUserTopicClient(cfg),
		UserUser:      NewUserUserClient(cfg),
		UserUserTopic: NewUserUserTopicClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		Answer:        NewAnswerClient(cfg),
		Tag:           NewTagClient(cfg),
		TagTopic:      NewTagTopicClient(cfg),
		Topic:         NewTopicClient(cfg),
		User:          NewUserClient(cfg),
		UserTopic:     NewUserTopicClient(cfg),
		UserUser:      NewUserUserClient(cfg),
		UserUserTopic: NewUserUserTopicClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Answer.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Answer.Use(hooks...)
	c.Tag.Use(hooks...)
	c.TagTopic.Use(hooks...)
	c.Topic.Use(hooks...)
	c.User.Use(hooks...)
	c.UserTopic.Use(hooks...)
	c.UserUser.Use(hooks...)
	c.UserUserTopic.Use(hooks...)
}

// AnswerClient is a client for the Answer schema.
type AnswerClient struct {
	config
}

// NewAnswerClient returns a client for the Answer from the given config.
func NewAnswerClient(c config) *AnswerClient {
	return &AnswerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `answer.Hooks(f(g(h())))`.
func (c *AnswerClient) Use(hooks ...Hook) {
	c.hooks.Answer = append(c.hooks.Answer, hooks...)
}

// Create returns a create builder for Answer.
func (c *AnswerClient) Create() *AnswerCreate {
	mutation := newAnswerMutation(c.config, OpCreate)
	return &AnswerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Answer.
func (c *AnswerClient) Update() *AnswerUpdate {
	mutation := newAnswerMutation(c.config, OpUpdate)
	return &AnswerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnswerClient) UpdateOne(a *Answer) *AnswerUpdateOne {
	mutation := newAnswerMutation(c.config, OpUpdateOne, withAnswer(a))
	return &AnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AnswerClient) UpdateOneID(id int) *AnswerUpdateOne {
	mutation := newAnswerMutation(c.config, OpUpdateOne, withAnswerID(id))
	return &AnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Answer.
func (c *AnswerClient) Delete() *AnswerDelete {
	mutation := newAnswerMutation(c.config, OpDelete)
	return &AnswerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AnswerClient) DeleteOne(a *Answer) *AnswerDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AnswerClient) DeleteOneID(id int) *AnswerDeleteOne {
	builder := c.Delete().Where(answer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AnswerDeleteOne{builder}
}

// Create returns a query builder for Answer.
func (c *AnswerClient) Query() *AnswerQuery {
	return &AnswerQuery{config: c.config}
}

// Get returns a Answer entity by its id.
func (c *AnswerClient) Get(ctx context.Context, id int) (*Answer, error) {
	return c.Query().Where(answer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AnswerClient) GetX(ctx context.Context, id int) *Answer {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// Hooks returns the client hooks.
func (c *AnswerClient) Hooks() []Hook {
	return c.hooks.Answer
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Create returns a create builder for Tag.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagClient) DeleteOneID(id int) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Create returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{config: c.config}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int) *Tag {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// TagTopicClient is a client for the TagTopic schema.
type TagTopicClient struct {
	config
}

// NewTagTopicClient returns a client for the TagTopic from the given config.
func NewTagTopicClient(c config) *TagTopicClient {
	return &TagTopicClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tagtopic.Hooks(f(g(h())))`.
func (c *TagTopicClient) Use(hooks ...Hook) {
	c.hooks.TagTopic = append(c.hooks.TagTopic, hooks...)
}

// Create returns a create builder for TagTopic.
func (c *TagTopicClient) Create() *TagTopicCreate {
	mutation := newTagTopicMutation(c.config, OpCreate)
	return &TagTopicCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for TagTopic.
func (c *TagTopicClient) Update() *TagTopicUpdate {
	mutation := newTagTopicMutation(c.config, OpUpdate)
	return &TagTopicUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagTopicClient) UpdateOne(tt *TagTopic) *TagTopicUpdateOne {
	mutation := newTagTopicMutation(c.config, OpUpdateOne, withTagTopic(tt))
	return &TagTopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagTopicClient) UpdateOneID(id int) *TagTopicUpdateOne {
	mutation := newTagTopicMutation(c.config, OpUpdateOne, withTagTopicID(id))
	return &TagTopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TagTopic.
func (c *TagTopicClient) Delete() *TagTopicDelete {
	mutation := newTagTopicMutation(c.config, OpDelete)
	return &TagTopicDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagTopicClient) DeleteOne(tt *TagTopic) *TagTopicDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagTopicClient) DeleteOneID(id int) *TagTopicDeleteOne {
	builder := c.Delete().Where(tagtopic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagTopicDeleteOne{builder}
}

// Create returns a query builder for TagTopic.
func (c *TagTopicClient) Query() *TagTopicQuery {
	return &TagTopicQuery{config: c.config}
}

// Get returns a TagTopic entity by its id.
func (c *TagTopicClient) Get(ctx context.Context, id int) (*TagTopic, error) {
	return c.Query().Where(tagtopic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagTopicClient) GetX(ctx context.Context, id int) *TagTopic {
	tt, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return tt
}

// Hooks returns the client hooks.
func (c *TagTopicClient) Hooks() []Hook {
	return c.hooks.TagTopic
}

// TopicClient is a client for the Topic schema.
type TopicClient struct {
	config
}

// NewTopicClient returns a client for the Topic from the given config.
func NewTopicClient(c config) *TopicClient {
	return &TopicClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topic.Hooks(f(g(h())))`.
func (c *TopicClient) Use(hooks ...Hook) {
	c.hooks.Topic = append(c.hooks.Topic, hooks...)
}

// Create returns a create builder for Topic.
func (c *TopicClient) Create() *TopicCreate {
	mutation := newTopicMutation(c.config, OpCreate)
	return &TopicCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Topic.
func (c *TopicClient) Update() *TopicUpdate {
	mutation := newTopicMutation(c.config, OpUpdate)
	return &TopicUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopicClient) UpdateOne(t *Topic) *TopicUpdateOne {
	mutation := newTopicMutation(c.config, OpUpdateOne, withTopic(t))
	return &TopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopicClient) UpdateOneID(id int) *TopicUpdateOne {
	mutation := newTopicMutation(c.config, OpUpdateOne, withTopicID(id))
	return &TopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Topic.
func (c *TopicClient) Delete() *TopicDelete {
	mutation := newTopicMutation(c.config, OpDelete)
	return &TopicDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TopicClient) DeleteOne(t *Topic) *TopicDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TopicClient) DeleteOneID(id int) *TopicDeleteOne {
	builder := c.Delete().Where(topic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopicDeleteOne{builder}
}

// Create returns a query builder for Topic.
func (c *TopicClient) Query() *TopicQuery {
	return &TopicQuery{config: c.config}
}

// Get returns a Topic entity by its id.
func (c *TopicClient) Get(ctx context.Context, id int) (*Topic, error) {
	return c.Query().Where(topic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopicClient) GetX(ctx context.Context, id int) *Topic {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// Hooks returns the client hooks.
func (c *TopicClient) Hooks() []Hook {
	return c.hooks.Topic
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserTopicClient is a client for the UserTopic schema.
type UserTopicClient struct {
	config
}

// NewUserTopicClient returns a client for the UserTopic from the given config.
func NewUserTopicClient(c config) *UserTopicClient {
	return &UserTopicClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usertopic.Hooks(f(g(h())))`.
func (c *UserTopicClient) Use(hooks ...Hook) {
	c.hooks.UserTopic = append(c.hooks.UserTopic, hooks...)
}

// Create returns a create builder for UserTopic.
func (c *UserTopicClient) Create() *UserTopicCreate {
	mutation := newUserTopicMutation(c.config, OpCreate)
	return &UserTopicCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for UserTopic.
func (c *UserTopicClient) Update() *UserTopicUpdate {
	mutation := newUserTopicMutation(c.config, OpUpdate)
	return &UserTopicUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserTopicClient) UpdateOne(ut *UserTopic) *UserTopicUpdateOne {
	mutation := newUserTopicMutation(c.config, OpUpdateOne, withUserTopic(ut))
	return &UserTopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserTopicClient) UpdateOneID(id int) *UserTopicUpdateOne {
	mutation := newUserTopicMutation(c.config, OpUpdateOne, withUserTopicID(id))
	return &UserTopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserTopic.
func (c *UserTopicClient) Delete() *UserTopicDelete {
	mutation := newUserTopicMutation(c.config, OpDelete)
	return &UserTopicDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserTopicClient) DeleteOne(ut *UserTopic) *UserTopicDeleteOne {
	return c.DeleteOneID(ut.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserTopicClient) DeleteOneID(id int) *UserTopicDeleteOne {
	builder := c.Delete().Where(usertopic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserTopicDeleteOne{builder}
}

// Create returns a query builder for UserTopic.
func (c *UserTopicClient) Query() *UserTopicQuery {
	return &UserTopicQuery{config: c.config}
}

// Get returns a UserTopic entity by its id.
func (c *UserTopicClient) Get(ctx context.Context, id int) (*UserTopic, error) {
	return c.Query().Where(usertopic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserTopicClient) GetX(ctx context.Context, id int) *UserTopic {
	ut, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ut
}

// Hooks returns the client hooks.
func (c *UserTopicClient) Hooks() []Hook {
	return c.hooks.UserTopic
}

// UserUserClient is a client for the UserUser schema.
type UserUserClient struct {
	config
}

// NewUserUserClient returns a client for the UserUser from the given config.
func NewUserUserClient(c config) *UserUserClient {
	return &UserUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useruser.Hooks(f(g(h())))`.
func (c *UserUserClient) Use(hooks ...Hook) {
	c.hooks.UserUser = append(c.hooks.UserUser, hooks...)
}

// Create returns a create builder for UserUser.
func (c *UserUserClient) Create() *UserUserCreate {
	mutation := newUserUserMutation(c.config, OpCreate)
	return &UserUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for UserUser.
func (c *UserUserClient) Update() *UserUserUpdate {
	mutation := newUserUserMutation(c.config, OpUpdate)
	return &UserUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserUserClient) UpdateOne(uu *UserUser) *UserUserUpdateOne {
	mutation := newUserUserMutation(c.config, OpUpdateOne, withUserUser(uu))
	return &UserUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserUserClient) UpdateOneID(id int) *UserUserUpdateOne {
	mutation := newUserUserMutation(c.config, OpUpdateOne, withUserUserID(id))
	return &UserUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserUser.
func (c *UserUserClient) Delete() *UserUserDelete {
	mutation := newUserUserMutation(c.config, OpDelete)
	return &UserUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserUserClient) DeleteOne(uu *UserUser) *UserUserDeleteOne {
	return c.DeleteOneID(uu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserUserClient) DeleteOneID(id int) *UserUserDeleteOne {
	builder := c.Delete().Where(useruser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserUserDeleteOne{builder}
}

// Create returns a query builder for UserUser.
func (c *UserUserClient) Query() *UserUserQuery {
	return &UserUserQuery{config: c.config}
}

// Get returns a UserUser entity by its id.
func (c *UserUserClient) Get(ctx context.Context, id int) (*UserUser, error) {
	return c.Query().Where(useruser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserUserClient) GetX(ctx context.Context, id int) *UserUser {
	uu, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return uu
}

// Hooks returns the client hooks.
func (c *UserUserClient) Hooks() []Hook {
	return c.hooks.UserUser
}

// UserUserTopicClient is a client for the UserUserTopic schema.
type UserUserTopicClient struct {
	config
}

// NewUserUserTopicClient returns a client for the UserUserTopic from the given config.
func NewUserUserTopicClient(c config) *UserUserTopicClient {
	return &UserUserTopicClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userusertopic.Hooks(f(g(h())))`.
func (c *UserUserTopicClient) Use(hooks ...Hook) {
	c.hooks.UserUserTopic = append(c.hooks.UserUserTopic, hooks...)
}

// Create returns a create builder for UserUserTopic.
func (c *UserUserTopicClient) Create() *UserUserTopicCreate {
	mutation := newUserUserTopicMutation(c.config, OpCreate)
	return &UserUserTopicCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for UserUserTopic.
func (c *UserUserTopicClient) Update() *UserUserTopicUpdate {
	mutation := newUserUserTopicMutation(c.config, OpUpdate)
	return &UserUserTopicUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserUserTopicClient) UpdateOne(uut *UserUserTopic) *UserUserTopicUpdateOne {
	mutation := newUserUserTopicMutation(c.config, OpUpdateOne, withUserUserTopic(uut))
	return &UserUserTopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserUserTopicClient) UpdateOneID(id int) *UserUserTopicUpdateOne {
	mutation := newUserUserTopicMutation(c.config, OpUpdateOne, withUserUserTopicID(id))
	return &UserUserTopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserUserTopic.
func (c *UserUserTopicClient) Delete() *UserUserTopicDelete {
	mutation := newUserUserTopicMutation(c.config, OpDelete)
	return &UserUserTopicDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserUserTopicClient) DeleteOne(uut *UserUserTopic) *UserUserTopicDeleteOne {
	return c.DeleteOneID(uut.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserUserTopicClient) DeleteOneID(id int) *UserUserTopicDeleteOne {
	builder := c.Delete().Where(userusertopic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserUserTopicDeleteOne{builder}
}

// Create returns a query builder for UserUserTopic.
func (c *UserUserTopicClient) Query() *UserUserTopicQuery {
	return &UserUserTopicQuery{config: c.config}
}

// Get returns a UserUserTopic entity by its id.
func (c *UserUserTopicClient) Get(ctx context.Context, id int) (*UserUserTopic, error) {
	return c.Query().Where(userusertopic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserUserTopicClient) GetX(ctx context.Context, id int) *UserUserTopic {
	uut, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return uut
}

// Hooks returns the client hooks.
func (c *UserUserTopicClient) Hooks() []Hook {
	return c.hooks.UserUserTopic
}
