// Code generated by entc, DO NOT EDIT.

package ent

import (
	"TH0400/repo/ent/usertopic"
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserTopicCreate is the builder for creating a UserTopic entity.
type UserTopicCreate struct {
	config
	mutation *UserTopicMutation
	hooks    []Hook
}

// SetUserID sets the user_id field.
func (utc *UserTopicCreate) SetUserID(i int) *UserTopicCreate {
	utc.mutation.SetUserID(i)
	return utc
}

// SetTopicID sets the topic_id field.
func (utc *UserTopicCreate) SetTopicID(i int) *UserTopicCreate {
	utc.mutation.SetTopicID(i)
	return utc
}

// SetID sets the id field.
func (utc *UserTopicCreate) SetID(i int) *UserTopicCreate {
	utc.mutation.SetID(i)
	return utc
}

// Mutation returns the UserTopicMutation object of the builder.
func (utc *UserTopicCreate) Mutation() *UserTopicMutation {
	return utc.mutation
}

// Save creates the UserTopic in the database.
func (utc *UserTopicCreate) Save(ctx context.Context) (*UserTopic, error) {
	if _, ok := utc.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	if _, ok := utc.mutation.TopicID(); !ok {
		return nil, &ValidationError{Name: "topic_id", err: errors.New("ent: missing required field \"topic_id\"")}
	}
	var (
		err  error
		node *UserTopic
	)
	if len(utc.hooks) == 0 {
		node, err = utc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserTopicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			utc.mutation = mutation
			node, err = utc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(utc.hooks) - 1; i >= 0; i-- {
			mut = utc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, utc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (utc *UserTopicCreate) SaveX(ctx context.Context) *UserTopic {
	v, err := utc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (utc *UserTopicCreate) sqlSave(ctx context.Context) (*UserTopic, error) {
	ut, _spec := utc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if ut.ID == 0 {
		id := _spec.ID.Value.(int64)
		ut.ID = int(id)
	}
	return ut, nil
}

func (utc *UserTopicCreate) createSpec() (*UserTopic, *sqlgraph.CreateSpec) {
	var (
		ut    = &UserTopic{config: utc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usertopic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usertopic.FieldID,
			},
		}
	)
	if id, ok := utc.mutation.ID(); ok {
		ut.ID = id
		_spec.ID.Value = id
	}
	if value, ok := utc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertopic.FieldUserID,
		})
		ut.UserID = value
	}
	if value, ok := utc.mutation.TopicID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: usertopic.FieldTopicID,
		})
		ut.TopicID = value
	}
	return ut, _spec
}
